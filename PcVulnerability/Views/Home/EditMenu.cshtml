@model PCV.DAL.ViewModels.MenuModel
@using PCV.DAL.Extension

@using PCV.DAL.ViewModels
@{
    ViewBag.Title = "Edit Menu";
}

<h2>Menu</h2>
@{

    var sortByList = new List<DeSerializeKeyExt>();

    sortByList.Add(new DeSerializeKeyExt { KeyName = "Parent", KeyValue = "1" });
    sortByList.Add(new DeSerializeKeyExt { KeyName = "Child", KeyValue = "2" });

    IList<MenuModel> menuList = ViewBag.menuList;

}

@using (Html.BeginForm("EditMenu", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{

    @Html.HiddenFor(m => m.Id);

    <div class="form-group">
        @Html.Label("Menu Name", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.MenuName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.MenuName, "", new { @class = "text-danger" })
        </div>
    </div>

        <div class="form-group">
            @Html.Label("Menu Desc", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Menu Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.MenuType, new SelectList(sortByList, "KeyValue", "KeyName"), "Menu Type", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MenuType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Parent Menu", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.ParentId, new SelectList(menuList, "Id", "MenuName"), "Select Parent", new { @class = "form-control" })
                <span class="field-validation-valid form-error-fields" data-valmsg-for="ParentId" data-valmsg-replace="true"></span>
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Menu Url", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Menu ToolTip", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Tooltip, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tooltip, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Inactive", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.InActive)
                    @Html.ValidationMessageFor(model => model.InActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Update" class="btn btn-default" />
            </div>
        </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
