@model PCV.DAL.ViewModels.MenuModel
@using PCV.DAL.Extension
@using PCV.DAL.ViewModels

@{
    ViewBag.Title = "Menu";
}
@{ 


    var menuTypeList = new List<DeSerializeKeyExt>();

    menuTypeList.Add(new DeSerializeKeyExt { KeyName = "Parent", KeyValue = "1" });
    menuTypeList.Add(new DeSerializeKeyExt { KeyName = "Child", KeyValue = "2" });

    var PriorityList = new List<DeSerializeKeyExt>();

    PriorityList.Add(new DeSerializeKeyExt { KeyName = "1", KeyValue = "1" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "2", KeyValue = "2" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "3", KeyValue = "3" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "4", KeyValue = "4" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "5", KeyValue = "5" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "6", KeyValue = "6" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "7", KeyValue = "7" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "8", KeyValue = "8" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "9", KeyValue = "9" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "10", KeyValue = "10" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "11", KeyValue = "11" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "12", KeyValue = "12" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "13", KeyValue = "13" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "14", KeyValue = "14" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "15", KeyValue = "15" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "16", KeyValue = "16" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "17", KeyValue = "17" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "18", KeyValue = "18" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "19", KeyValue = "19" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "20", KeyValue = "20" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "21", KeyValue = "21" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "22", KeyValue = "22" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "23", KeyValue = "23" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "24", KeyValue = "24" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "25", KeyValue = "25" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "26", KeyValue = "26" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "27", KeyValue = "27" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "28", KeyValue = "28" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "29", KeyValue = "29" });
    PriorityList.Add(new DeSerializeKeyExt { KeyName = "30", KeyValue = "30" });

    IList<MenuModel> menuList = ViewBag.menuList;

}

<div class="page-content-wrapper">
    <div class="page-content">
        <!-- BEGIN PAGE HEADER-->
        <div class="breadcrumbs">
            <h1>
                Add/Edit Menu
            </h1>
            <ol class="breadcrumb">
                <li>
                    <a href="/">Home</a>
                </li>
                <li>
                    <a href="@Url.Action("MenuList","Home")">Manage Menus</a>
                </li>
                <li class="active">Add/Edit Menu</li>
            </ol>

        </div>

        <div class="row">
            <div class="col-md-12">

                <div class="portlet light bordered user-add-form-portlet">
                    <div class="portlet-title">
                        <div class="caption">
                            <i class="fa fa-reorder"></i> Menu form
                        </div>
                    </div>

                    <div class="portlet-body form">

                        @using (Html.BeginForm("Menu", "Home", FormMethod.Post, new { @class = "", role = "form" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-body">

                                @if (!ViewData.ModelState.IsValid)
                                {

                                    <div class="alert alert-danger">
                                        <button class="close" data-close="alert"></button>
                                        @Html.ValidationSummary()
                                    </div>
                                }

                                @Html.HiddenFor(m => m.Id)
                                <input type="hidden" id="hdParent" value="@Model.ParentId" />


                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label" for="name">
                                                Menu Name:
                                                <span class="required">*</span>
                                            </label>
                                            @Html.TextBoxFor(m => m.MenuName, new { @class = "required form-control", placeholder = "First Name" })

                                            <span class="help-block">
                                                @Html.ValidationMessageFor(m => m.MenuName, "", new { @class = "text-danger" })
                                            </span>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label" for="password">
                                                Display Order
                                                <span class="required">*</span>
                                            </label>
                                            @Html.DropDownListFor(m => m.Priority, new SelectList(PriorityList, "KeyValue", "KeyName"), "Display Order", new { @class = "form-control required select2me" })

                                            <span class="help-block">
                                                @Html.ValidationMessageFor(m => m.Priority, "", new { @class = "text-danger" })
                                            </span>
                                        </div>
                                    </div>

                                </div>

                                <div class="row">

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label" for="last_name">
                                                Menu type:
                                                <span class="required">*</span>
                                            </label>
                                            @Html.DropDownListFor(m => m.MenuType, new SelectList(menuTypeList, "KeyValue", "KeyName"), "Menu Type", new { @class = "form-control" })

                                            <span class="help-block">
                                                @Html.ValidationMessageFor(m => m.MenuType, "", new { @class = "text-danger" })
                                            </span>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label" for="email">
                                                Menu Url
                                                <span class="required">*</span>
                                            </label>
                                            @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control" } })

                                            <span class="help-block">
                                                @Html.ValidationMessageFor(m => m.Url, "", new { @class = "text-danger" })
                                            </span>
                                        </div>
                                    </div>




                                </div>


                                <div class="row hide" id="dvParent">

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label class="control-label" for="username">
                                                Parent
                                                <span class="required">*</span>
                                            </label>
                                            @Html.DropDownListFor(m => m.ParentId, new SelectList(menuList, "Id", "MenuName"), "Select Parent", new { @class = "form-control required select2me" })

                                            <span class="help-block">
                                                @Html.ValidationMessageFor(m => m.ParentId, "", new { @class = "text-danger" })
                                            </span>
                                        </div>
                                    </div>


                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group" id="user-admin-error">
                                            <label class="control-label">Menu Tool Tip</label>

                                            @Html.EditorFor(model => model.Tooltip, new { htmlAttributes = new { @class = "form-control" } })


                                            <span class="help-block">
                                                @Html.ValidationMessageFor(m => m.Tooltip, "", new { @class = "text-danger" })
                                            </span>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group" id="user-admin-error">
                                            <label class="control-label">Menu Desc</label>

                                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })



                                        </div>
                                    </div>


                                </div>




                                <div class="form-actions">
                                    <label class="control-label" for="supplier_id">Inactive:</label>
                                    @Html.CheckBoxFor(model => model.InActive, new { @class = "form-control" })

                                </div>


                            </div>
                            <div class="form-actions">

                                @if (Model.Id.IsBlank())
                                {
                                    <button class="button" type="submit">Submit</button>
                                }
                                else
                                {
                                    <button class="button" type="submit">Update</button>
                                }

                                <a href="@Url.Action("MenuList","Account")" class="button white">Cancel</a>
                            </div>
                        }


                    </div>
                </div>
            </div>
        </div>
        <!-- END PAGE CONTENT-->
    </div>
</div>



@section Scripts {
    <script type="text/javascript">

        $(document).ready(function () {

            if ($("#hdParent").val() > 0) {
                $("#dvParent").removeClass('hide');
            }

            $("#MenuType").change(function () {


                if ($("#MenuType").val() == 2) {
                    $("#dvParent").removeClass('hide');
                }
                else {
                    $("#dvParent").addClass('hide');
                }
            });

        })




    </script>

    <script>


    </script>
}