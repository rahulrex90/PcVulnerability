using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using Microsoft.AspNet.Identity.Owin;
using PCV.DAL.UnitOfWork;
using PCV.DAL.ViewModels;
using PcVulnerability.Helpers;
using PcVulnerability.Models;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;

namespace PcVulnerability.Controllers
{
    public class ReportController : Controller
    {

        #region Fields

        private IUnitOfWork _unitofwork;
        private ApplicationSignInManager _signInManager;
        private ApplicationUserManager _userManager;
        private RoleManager<IdentityRole> _roleManager;



        #endregion

        #region Constructors



        public ReportController()
        {


        }

        public ReportController(ApplicationUserManager userManager, ApplicationSignInManager signInManager, IUnitOfWork unitofwork)
        {
            UserManager = userManager;
            SignInManager = signInManager;
            _unitofwork = unitofwork;
            _roleManager = new RoleManager<IdentityRole>(new RoleStore<IdentityRole>(new ApplicationDbContext()));

        }

        public ApplicationSignInManager SignInManager
        {
            get
            {
                return _signInManager ?? HttpContext.GetOwinContext().Get<ApplicationSignInManager>();
            }
            private set
            {
                _signInManager = value;
            }
        }

        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            private set
            {
                _userManager = value;
            }
        }

        #endregion

        // GET: Report
        public ActionResult Index()
        {



            return View();
        }


        //    public ActionResult ChartBoxPlot()
        //    {
        //        string sdateTime = "01/08/2017 14:50:50.42";
        //        string edateTime = "12/08/2017 14:50:50.42";
        //        DateTime sdt = Convert.ToDateTime(sdateTime);
        //        DateTime edt = Convert.ToDateTime(edateTime);
        //        var rawdata = _unitofwork.ReportRepo.GetAllPCTOOLListInRange(sdt, edt);

        //        var query = from o in rawdata
        //                    orderby o.sys_date
        //                    group o by o.sys_date into g
        //                    select new ReportModels
        //                    {
        //                        NoOfDays = Convert.ToDateTime(g.Key).Day,
        //                        Pass = g.Sum(d => d.Result == "PASS" ? 1 : 0),
        //                        Fail = g.Sum(d => d.Result == "FAIL" ? 1 : 0),

        //                    };

        //        var data = query.ToList();


        //        string[] Xpoint = new string[data.Count];
        //        Decimal[] Ypoint = new Decimal[data.Count];
        //        Decimal[] Total = new Decimal[data.Count];

        //        Decimal[] Ypass = new decimal[data.Count];

        //        for (int i = 0; i < data.Count; i++)
        //        {
        //            Xpoint[i] = data[i].NoOfDays.ToString();
        //            Ypoint[i] = Convert.ToInt32(data[i].Fail);
        //            Ypass[i] = Convert.ToInt32(data[i].Pass);
        //            Total[i] = Convert.ToInt32(data[i].Fail) + Convert.ToInt32(data[i].Pass);
        //        }
        //        Decimal Total_sum = Total.Sum();
        //        Decimal fail_total = Ypoint.Sum();
        //        if (fail_total >= 1 & Total_sum >= 1)
        //        {
        //            Decimal Fail_per = (fail_total / Total_sum) * 100;
        //            //lblfaild.Text = Convert.ToString(Math.Round(Fail_per, 2)) + "%";
        //        }
        //        Decimal Pass_total = Ypass.Sum();
        //        if (Pass_total >= 1 & Total_sum >= 1)
        //        {
        //            Decimal Pass_per = (Pass_total / Total_sum) * 100;
        //            //lblPassper.Text = Convert.ToString(Math.Round(Pass_per, 2)) + "%";
        //        }
        //        //LineChart_PCSecurity.Series.Add(new AjaxControlToolkit.LineChartSeries { Name = "Fail", Data = Ypoint });
        //        //LineChart_PCSecurity.CategoriesAxis = string.Join(",", Xpoint);
        //        //LineChart_PCSecurity.Series.Add(new AjaxControlToolkit.LineChartSeries { Name = "Pass", Data = Ypass });
        //        //LineChart_PCSecurity.Series.Add(new AjaxControlToolkit.LineChartSeries { Name = "Total", Data = Total });






        //        new Chart(width: 600, height: 400, theme: ChartTheme.Yellow)

        ///// SeriesChartType.BoxPlot
        //.AddTitle("Chart for Growth [BoxPlot Chart]")
        //                .AddSeries("Fail", chartType: "Line", xValue: Xpoint, yValues: Ypoint)
        //                .AddSeries("Pass", chartType: "Line", xValue: Xpoint, yValues: Ypass)
        //                .Write("bmp");

        //        return null;
        //    }
        public ActionResult ChangeSiteConnecttionOnDropdownChange(string siteId)
        {

    //        string baseUrl = Request.Url.Scheme + "://" + Request.Url.Authority +
    //Request.ApplicationPath.TrimEnd('/') + "/";

            string url2= Request.Url.GetLeftPart(UriPartial.Authority);
            if (siteId.IsNotBlank())
            {
                var siteDetail = _unitofwork.HomeRepo.GetSiteDetailById(siteId.To<long>());
                if (siteDetail.IsNotBlank())
                {
                    SqlConnectionStringBuilder sqlString = new SqlConnectionStringBuilder()
                    {
                        DataSource = siteDetail.Server_IP, // Server name
                        InitialCatalog = siteDetail.Database_Name,  //Database
                        UserID = siteDetail.Database_ID,         //Username
                        Password = siteDetail.Database_PW,  //Password
                    };
                    try
                    {
                        using (SqlConnection conn = new SqlConnection(sqlString.ToString()))
                        {
                            conn.Open(); // throws if invalid
                            var connString = _unitofwork.CommonRepo.GetConString(siteDetail.Server_IP, siteDetail.Database_Name, siteDetail.Database_ID, siteDetail.Database_PW);
                            MySession.Current.ConnString = connString;
                            MySession.Current.SiteId = siteDetail.ID.ToString();
                            _unitofwork.HomeRepo.SetDefaultSiteByForUser(MySession.Current.UserId, siteDetail.ID);
                            return Json(new {success = true,data=siteDetail }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    catch (Exception ex)
                    {
                        return new HttpStatusCodeResult(HttpStatusCode.BadRequest, ex.Message);
                    }
                }
            }
            return Json(new { success = false,message="Some error occured!!" }, JsonRequestBehavior.AllowGet);
           
        }

        public ActionResult DashReport()
        {
            return View();
        }


        public JsonResult LineChartInitial()
        {

            ReportViewModels model = new ReportViewModels();



            DateTime sdt = DateTime.Now.Date.AddDays(-15);
            DateTime edt = DateTime.Now.Date;

            //var rawdata = _unitofwork.ReportRepo.GetAllPCTOOLs().ToList();
            var rawdata = _unitofwork.ReportRepo.GetAllPCTOOLListInRange(sdt, edt);
            #region============ Main Garaph========================================

            var query = from o in rawdata
                        orderby o.sys_date
                        group o by o.sys_date into g
                        select new ReportModels
                        {
                            NoOfDays = Convert.ToDateTime(g.Key).Day,
                            Pass = g.Sum(d => d.Result.TrimData() == "PASS" ? 1 : 0),
                            Fail = g.Sum(d => d.Result.TrimData() == "FAIL" ? 1 : 0),

                        };

            var data = query.ToList();

            string[] Xpoint = new string[data.Count];
            Decimal[] Yfail = new Decimal[data.Count];
            Decimal[] Ypass = new decimal[data.Count];
            Decimal[] Total = new Decimal[data.Count];
            for (int i = 0; i < data.Count; i++)
            {
                Xpoint[i] = data[i].NoOfDays.ToString();
                Yfail[i] = Convert.ToInt32(data[i].Fail);
                Ypass[i] = Convert.ToInt32(data[i].Pass);
                Total[i] = Convert.ToInt32(data[i].Fail) + Convert.ToInt32(data[i].Pass);
            }
            Decimal Total_sum = Total.Sum();
            Decimal fail_total = Yfail.Sum();
            if (fail_total >= 1 & Total_sum >= 1)
            {
                Decimal Fail_per = (fail_total / Total_sum) * 100;
                model.FailPercent = Convert.ToString(Math.Round(Fail_per, 2)) + "%";
            }
            else
            {
                model.FailPercent = "0";
            }
            Decimal Pass_total = Ypass.Sum();
            if (Pass_total >= 1 & Total_sum >= 1)
            {
                Decimal Pass_per = (Pass_total / Total_sum) * 100;
                model.PassPercent = Convert.ToString(Math.Round(Pass_per, 2)) + "%";
            }
            else
            {
                model.PassPercent = "0";
            }
            model.Xpoint = Xpoint;
            model.Yfail = Yfail;
            model.Ypass = Ypass;
            model.Total = Total;

            #endregion


            model.WaterGraph = GetWaterGraph(rawdata);
            model.PrivacyGraph = GetPrivacyGraph(rawdata);
            model.AntivirusGraph = GetAntivirusGraph(rawdata);
            model.SharedFolder = GetSharedFolderGraph(rawdata);
            model.Port80 = GetPort80Graph(rawdata);
            model.WindowUpdate = GetScreenSaverGraph(rawdata);
            // model.PCSecurityFail = GetPCSequrityGraph(rawdata);

            return Json(model, JsonRequestBehavior.AllowGet);
        }
        public JsonResult LineChart(string sDate, string eDate)
        {

            ReportViewModels model = new ReportViewModels();

            string sdateTime = sDate;
            string edateTime = eDate;

            DateTime sdt = Convert.ToDateTime(sdateTime).Date;
            DateTime edt = Convert.ToDateTime(edateTime).Date;


            var rawdata = _unitofwork.ReportRepo.GetAllPCTOOLListInRange(sdt, edt);
            #region============ Main Garaph========================================

            var query = from o in rawdata
                        orderby o.sys_date
                        group o by o.sys_date into g
                        select new ReportModels
                        {
                            NoOfDays = Convert.ToDateTime(g.Key).Day,
                            Pass = g.Sum(d => d.Result.TrimData() == "PASS" ? 1 : 0),
                            Fail = g.Sum(d => d.Result.TrimData() == "FAIL" ? 1 : 0),

                        };

            var data = query.ToList();

            string[] Xpoint = new string[data.Count];
            Decimal[] Yfail = new Decimal[data.Count];
            Decimal[] Ypass = new decimal[data.Count];
            Decimal[] Total = new Decimal[data.Count];
            for (int i = 0; i < data.Count; i++)
            {
                Xpoint[i] = data[i].NoOfDays.ToString();
                Yfail[i] = Convert.ToInt32(data[i].Fail);
                Ypass[i] = Convert.ToInt32(data[i].Pass);
                Total[i] = Convert.ToInt32(data[i].Fail) + Convert.ToInt32(data[i].Pass);
            }
            Decimal Total_sum = Total.Sum();
            Decimal fail_total = Yfail.Sum();
            if (fail_total >= 1 & Total_sum >= 1)
            {
                Decimal Fail_per = (fail_total / Total_sum) * 100;
                model.FailPercent = Convert.ToString(Math.Round(Fail_per, 2)) + "%";
            }
            else
            {
                model.FailPercent = "0";
            }
            Decimal Pass_total = Ypass.Sum();
            if (Pass_total >= 1 & Total_sum >= 1)
            {
                Decimal Pass_per = (Pass_total / Total_sum) * 100;
                model.PassPercent = Convert.ToString(Math.Round(Pass_per, 2)) + "%";
            }
            else
            {
                model.PassPercent = "0";
            }

            model.Xpoint = Xpoint;
            model.Yfail = Yfail;
            model.Ypass = Ypass;
            model.Total = Total;

            #endregion


            model.WaterGraph = GetWaterGraph(rawdata);
            model.PrivacyGraph = GetPrivacyGraph(rawdata);
            model.AntivirusGraph = GetAntivirusGraph(rawdata);
            model.SharedFolder = GetSharedFolderGraph(rawdata);
            model.Port80 = GetPort80Graph(rawdata);
            model.WindowUpdate = GetScreenSaverGraph(rawdata);
            // model.PCSecurityFail = GetPCSequrityGraph(rawdata);

            return Json(model, JsonRequestBehavior.AllowGet);
        }


        private GraphModel GetWaterGraph(IList<PCToolModels> rawdata)
        {
            GraphModel model = new GraphModel();
            var query = from o in rawdata
                        orderby o.sys_date
                        group o by o.sys_date into g
                        select new ReportModels
                        {
                            NoOfDays = Convert.ToDateTime(g.Key).Day,
                            Pass = g.Sum(d => d.Waterwall_Installed.TrimData() == "Y" ? 1 : 0),
                            Fail = g.Sum(d => d.Waterwall_Installed.TrimData() == "N" ? 1 : 0),

                        };

            var data = query.ToList();

            string[] Xpoint = new string[data.Count];
            Decimal[] Yfail = new Decimal[data.Count];
            Decimal[] Ypass = new decimal[data.Count];
            Decimal[] Total = new Decimal[data.Count];
            for (int i = 0; i < data.Count; i++)
            {
                Xpoint[i] = data[i].NoOfDays.ToString();
                Yfail[i] = Convert.ToInt32(data[i].Fail);
                Ypass[i] = Convert.ToInt32(data[i].Pass);
                Total[i] = Convert.ToInt32(data[i].Fail) + Convert.ToInt32(data[i].Pass);
            }
            Decimal Total_sum = Total.Sum();
            Decimal fail_total = Yfail.Sum();
            if (fail_total >= 1 & Total_sum >= 1)
            {
                Decimal Fail_per = (fail_total / Total_sum) * 100;
                model.FailPercent = Convert.ToString(Math.Round(Fail_per, 2)) + "%";
            }
            else
            {
                model.FailPercent = "0";
            }
            Decimal Pass_total = Ypass.Sum();
            if (Pass_total >= 1 & Total_sum >= 1)
            {
                Decimal Pass_per = (Pass_total / Total_sum) * 100;
                model.PassPercent = Convert.ToString(Math.Round(Pass_per, 2)) + "%";
            }
            else
            {
                model.PassPercent = "0";
            }

            model.Xpoint = Xpoint;
            model.Yfail = Yfail;
            model.Ypass = Ypass;
            model.Total = Total;


            return model;
        }
        private GraphModel GetPrivacyGraph(IList<PCToolModels> rawdata)
        {
            GraphModel model = new GraphModel();
            var query = from o in rawdata
                        orderby o.sys_date
                        group o by o.sys_date into g
                        select new ReportModels
                        {
                            NoOfDays = Convert.ToDateTime(g.Key).Day,
                            Pass = g.Sum(d => d.Privacy_i_Installed.TrimData() == "Y" ? 1 : 0),
                            Fail = g.Sum(d => d.Privacy_i_Installed.TrimData() == "N" ? 1 : 0),

                        };

            var data = query.ToList();

            string[] Xpoint = new string[data.Count];
            Decimal[] Yfail = new Decimal[data.Count];
            Decimal[] Ypass = new decimal[data.Count];
            Decimal[] Total = new Decimal[data.Count];
            for (int i = 0; i < data.Count; i++)
            {
                Xpoint[i] = data[i].NoOfDays.ToString();
                Yfail[i] = Convert.ToInt32(data[i].Fail);
                Ypass[i] = Convert.ToInt32(data[i].Pass);
                Total[i] = Convert.ToInt32(data[i].Fail) + Convert.ToInt32(data[i].Pass);
            }
            Decimal Total_sum = Total.Sum();
            Decimal fail_total = Yfail.Sum();
            if (fail_total >= 1 & Total_sum >= 1)
            {
                Decimal Fail_per = (fail_total / Total_sum) * 100;
                model.FailPercent = Convert.ToString(Math.Round(Fail_per, 2)) + "%";
            }
            else
            {
                model.FailPercent = "0";
            }
            Decimal Pass_total = Ypass.Sum();
            if (Pass_total >= 1 & Total_sum >= 1)
            {
                Decimal Pass_per = (Pass_total / Total_sum) * 100;
                model.PassPercent = Convert.ToString(Math.Round(Pass_per, 2)) + "%";
            }
            else
            {
                model.PassPercent = "0";
            }

            model.Xpoint = Xpoint;
            model.Yfail = Yfail;
            model.Ypass = Ypass;
            model.Total = Total;


            return model;
        }
        private GraphModel GetAntivirusGraph(IList<PCToolModels> rawdata)
        {
            GraphModel model = new GraphModel();
            var query = from o in rawdata
                        orderby o.sys_date
                        group o by o.sys_date into g
                        select new ReportModels
                        {
                            NoOfDays = Convert.ToDateTime(g.Key).Day,
                            Pass = g.Sum(d => d.Symantec_Installed.TrimData() == "Y" ? 1 : 0),
                            Fail = g.Sum(d => d.Symantec_Installed.TrimData() == "N" ? 1 : 0),

                        };

            var data = query.ToList();

            string[] Xpoint = new string[data.Count];
            Decimal[] Yfail = new Decimal[data.Count];
            Decimal[] Ypass = new decimal[data.Count];
            Decimal[] Total = new Decimal[data.Count];
            for (int i = 0; i < data.Count; i++)
            {
                Xpoint[i] = data[i].NoOfDays.ToString();
                Yfail[i] = Convert.ToInt32(data[i].Fail);
                Ypass[i] = Convert.ToInt32(data[i].Pass);
                Total[i] = Convert.ToInt32(data[i].Fail) + Convert.ToInt32(data[i].Pass);
            }
            Decimal Total_sum = Total.Sum();
            Decimal fail_total = Yfail.Sum();
            if (fail_total >= 1 & Total_sum >= 1)
            {
                Decimal Fail_per = (fail_total / Total_sum) * 100;
                model.FailPercent = Convert.ToString(Math.Round(Fail_per, 2)) + "%";
            }
            else
            {
                model.FailPercent = "0";
            }
            Decimal Pass_total = Ypass.Sum();
            if (Pass_total >= 1 & Total_sum >= 1)
            {
                Decimal Pass_per = (Pass_total / Total_sum) * 100;
                model.PassPercent = Convert.ToString(Math.Round(Pass_per, 2)) + "%";
            }
            else
            {
                model.PassPercent = "0";
            }

            model.Xpoint = Xpoint;
            model.Yfail = Yfail;
            model.Ypass = Ypass;
            model.Total = Total;


            return model;
        }



        private GraphModel GetSharedFolderGraph(IList<PCToolModels> rawdata)
        {
            GraphModel model = new GraphModel();
            var query = from o in rawdata
                        orderby o.sys_date
                        group o by o.sys_date into g
                        select new ReportModels
                        {
                            NoOfDays = Convert.ToDateTime(g.Key).Day,
                            Pass = g.Sum(d => d.Shared_Folder_count.TrimData() == "Y" ? 1 : 0),
                            Fail = g.Sum(d => d.Shared_Folder_count.TrimData() == "N" ? 1 : 0),

                        };

            var data = query.ToList();

            string[] Xpoint = new string[data.Count];
            Decimal[] Yfail = new Decimal[data.Count];
            Decimal[] Ypass = new decimal[data.Count];
            Decimal[] Total = new Decimal[data.Count];
            for (int i = 0; i < data.Count; i++)
            {
                Xpoint[i] = data[i].NoOfDays.ToString();
                Yfail[i] = Convert.ToInt32(data[i].Fail);
                Ypass[i] = Convert.ToInt32(data[i].Pass);
                Total[i] = Convert.ToInt32(data[i].Fail) + Convert.ToInt32(data[i].Pass);
            }
            Decimal Total_sum = Total.Sum();
            Decimal fail_total = Yfail.Sum();
            if (fail_total >= 1 & Total_sum >= 1)
            {
                Decimal Fail_per = (fail_total / Total_sum) * 100;
                model.FailPercent = Convert.ToString(Math.Round(Fail_per, 2)) + "%";
            }
            else
            {
                model.FailPercent = "0";
            }
            Decimal Pass_total = Ypass.Sum();
            if (Pass_total >= 1 & Total_sum >= 1)
            {
                Decimal Pass_per = (Pass_total / Total_sum) * 100;
                model.PassPercent = Convert.ToString(Math.Round(Pass_per, 2)) + "%";
            }
            else
            {
                model.PassPercent = "0";
            }

            model.Xpoint = Xpoint;
            model.Yfail = Yfail;
            model.Ypass = Ypass;
            model.Total = Total;


            return model;
        }
        private GraphModel GetPort80Graph(IList<PCToolModels> rawdata)
        {
            GraphModel model = new GraphModel();
            var query = from o in rawdata
                        orderby o.sys_date
                        group o by o.sys_date into g
                        select new ReportModels
                        {
                            NoOfDays = Convert.ToDateTime(g.Key).Day,
                            Pass = g.Sum(d => d.Port_80_disabled.TrimData() == "Y" ? 1 : 0),
                            Fail = g.Sum(d => d.Port_80_disabled.TrimData() == "N" ? 1 : 0),

                        };

            var data = query.ToList();

            string[] Xpoint = new string[data.Count];
            Decimal[] Yfail = new Decimal[data.Count];
            Decimal[] Ypass = new decimal[data.Count];
            Decimal[] Total = new Decimal[data.Count];
            for (int i = 0; i < data.Count; i++)
            {
                Xpoint[i] = data[i].NoOfDays.ToString();
                Yfail[i] = Convert.ToInt32(data[i].Fail);
                Ypass[i] = Convert.ToInt32(data[i].Pass);
                Total[i] = Convert.ToInt32(data[i].Fail) + Convert.ToInt32(data[i].Pass);
            }
            Decimal Total_sum = Total.Sum();
            Decimal fail_total = Yfail.Sum();
            if (fail_total >= 1 & Total_sum >= 1)
            {
                Decimal Fail_per = (fail_total / Total_sum) * 100;
                model.FailPercent = Convert.ToString(Math.Round(Fail_per, 2)) + "%";
            }
            else
            {
                model.FailPercent = "0";
            }
            Decimal Pass_total = Ypass.Sum();
            if (Pass_total >= 1 & Total_sum >= 1)
            {
                Decimal Pass_per = (Pass_total / Total_sum) * 100;
                model.PassPercent = Convert.ToString(Math.Round(Pass_per, 2)) + "%";
            }
            else
            {
                model.PassPercent = "0";
            }

            model.Xpoint = Xpoint;
            model.Yfail = Yfail;
            model.Ypass = Ypass;
            model.Total = Total;


            return model;
        }

        private GraphModel GetScreenSaverGraph(IList<PCToolModels> rawdata)
        {
            GraphModel model = new GraphModel();
            var query = from o in rawdata
                        orderby o.sys_date
                        group o by o.sys_date into g
                        select new ReportModels
                        {
                            NoOfDays = Convert.ToDateTime(g.Key).Day,
                            Pass = g.Sum(d => d.Screen_Saver_Avtive.TrimData() == "Y" ? 1 : 0),
                            Fail = g.Sum(d => d.Screen_Saver_Avtive.TrimData() == "N" ? 1 : 0),

                        };

            var data = query.ToList();

            string[] Xpoint = new string[data.Count];
            Decimal[] Yfail = new Decimal[data.Count];
            Decimal[] Ypass = new decimal[data.Count];
            Decimal[] Total = new Decimal[data.Count];
            for (int i = 0; i < data.Count; i++)
            {
                Xpoint[i] = data[i].NoOfDays.ToString();
                Yfail[i] = Convert.ToInt32(data[i].Fail);
                Ypass[i] = Convert.ToInt32(data[i].Pass);
                Total[i] = Convert.ToInt32(data[i].Fail) + Convert.ToInt32(data[i].Pass);
            }
            Decimal Total_sum = Total.Sum();
            Decimal fail_total = Yfail.Sum();
            if (fail_total >= 1 & Total_sum >= 1)
            {
                Decimal Fail_per = (fail_total / Total_sum) * 100;
                model.FailPercent = Convert.ToString(Math.Round(Fail_per, 2)) + "%";
            }
            else
            {
                model.FailPercent = "0";
            }
            Decimal Pass_total = Ypass.Sum();
            if (Pass_total >= 1 & Total_sum >= 1)
            {
                Decimal Pass_per = (Pass_total / Total_sum) * 100;
                model.PassPercent = Convert.ToString(Math.Round(Pass_per, 2)) + "%";
            }
            else
            {
                model.PassPercent = "0";
            }

            model.Xpoint = Xpoint;
            model.Yfail = Yfail;
            model.Ypass = Ypass;
            model.Total = Total;


            return model;
        }





        public ActionResult AllSubsidiaryReport()
        {
            var regionList = _unitofwork.HomeRepo.GetAllRegionList().Where(m => m.InActive == false).ToList();

            ViewBag.regionList = regionList;
            return View();
        }

        public JsonResult SubsidiaryChart(string sDate, string eDate, string regionCode)
        {
            string sdateTime = sDate;
            string edateTime = eDate;

            DateTime sdt = Convert.ToDateTime(sdateTime).Date;
            DateTime edt = Convert.ToDateTime(edateTime).Date;
            List<GraphModel> model = new List<GraphModel>();
            SiteGraphModel oneSgmodel = new SiteGraphModel();


            var rawdata = _unitofwork.ReportRepo.GetAllPC_TOOLUserSiteList(sdt, edt, regionCode);
            if (rawdata.IsNotBlank())
            {
                var allSites = rawdata.Select(m => m.Site).Distinct().ToList();


                string[] GrossXpoint = new string[allSites.Count];
                decimal[] GrossYfail = new decimal[allSites.Count];
                decimal[] GrossTotal = new decimal[allSites.Count];
                decimal[] GrossYpass = new decimal[allSites.Count];
                int grossI = 0;
                foreach (var oneSite in allSites)
                {
                    GraphModel onemodel = new GraphModel();




                    var gData = rawdata.Where(m => m.Site == oneSite).ToList().Select(n => new ReportModels()
                    {

                        NoOfDays = Convert.ToDateTime(n.Sys_Date).Day,
                        Pass = n.Pass_Result.To<int>(),
                        Fail = n.Fail_Result.To<int>(),
                        Total = n.Total_Result.To<int>()
                    }).ToList();

                    decimal grossFail = gData.Sum(m => m.Fail);
                    decimal grossPass = gData.Sum(m => m.Pass);
                    decimal grossTotal = gData.Sum(m => m.Total);

                    GrossXpoint[grossI] = oneSite.ToString();

                    if (grossTotal >= 1 & grossFail >= 1)
                    {
                        Decimal Fail_per = (grossFail / grossTotal) * 100;
                        GrossYfail[grossI] = Math.Round(Fail_per, 2);
                    }
                    else
                    {
                        GrossYfail[grossI] = 0;
                    }
                    if (grossTotal >= 1 & grossPass >= 1)
                    {
                        Decimal Pass_per = (grossPass / grossTotal) * 100;
                        GrossYpass[grossI] = Math.Round(Pass_per, 2);
                    }
                    else
                    {
                        GrossYpass[grossI] = 0;
                    }

                    GrossTotal[grossI] = GrossYpass[grossI] + GrossYfail[grossI];


                    if (gData.Count > 0)
                    {
                        string[] Xpoint = new string[gData.Count];
                        Decimal[] Yfail = new Decimal[gData.Count];
                        Decimal[] Total = new Decimal[gData.Count];
                        Decimal[] Ypass = new decimal[gData.Count];

                        for (int i = 0; i < gData.Count; i++)
                        {
                            Xpoint[i] = gData[i].NoOfDays.ToString();
                            Yfail[i] = Convert.ToInt32(gData[i].Fail);
                            Total[i] = Convert.ToInt32(gData[i].Total);
                            Ypass[i] = Convert.ToInt32(gData[i].Pass);
                        }

                        onemodel.Xpoint = Xpoint;
                        onemodel.Yfail = Yfail;
                        onemodel.Ypass = Ypass;
                        onemodel.Total = Total;
                        Decimal Total_sum = Total.Sum();
                        Decimal fail_total = Yfail.Sum();
                        if (Total_sum >= 1 & fail_total >= 1)
                        {
                            Decimal Fail_per = (fail_total / Total_sum) * 100;
                            onemodel.FailPercent = Convert.ToString(Math.Round(Fail_per, 2)) + "%";
                        }
                        else
                        {
                            onemodel.FailPercent = "0";
                        }
                        Decimal Pass_total = Ypass.Sum();
                        if (Total_sum >= 1 & Pass_total >= 1)
                        {
                            Decimal Pass_per = (Pass_total / Total_sum) * 100;
                            onemodel.PassPercent = Convert.ToString(Math.Round(Pass_per, 2)) + "%";
                        }
                        else
                        {
                            onemodel.PassPercent = "0";
                        }
                        onemodel.SiteName = oneSite;

                        model.Add(onemodel);
                    }
                    grossI++;
                }

                oneSgmodel.Xpoint = GrossXpoint;
                oneSgmodel.Yfail = GrossYfail;
                oneSgmodel.Ypass = GrossYpass;
                oneSgmodel.Total = GrossTotal;
                return Json(new { data = model, siteData = oneSgmodel, success = true }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { success = false }, JsonRequestBehavior.AllowGet);
            }



        }

        public ActionResult PcVulnerabilityReport()
        {
            DateTime sdt = DateTime.Now.Date.AddDays(-15);
            DateTime edt = DateTime.Now.Date;
            var data = _unitofwork.ReportRepo.GetAllPCTOOLListInRange(sdt, edt);
            if (data.IsNotBlank())
            {
                var department = data.Select(m => new ddlPcToolDepartmentModel { DepartmentName = m.DepartName }).GroupBy(x => x.DepartmentName, (key, group) => group.First()).OrderBy(i => i.DepartmentName).ToList();
                var users = data.Select(m => new ddlPcToolUserModel { UserName = m.User_Name }).GroupBy(x => x.UserName, (key, group) => group.First()).OrderBy(i => i.UserName).ToList();

                ViewBag.users = users;
                ViewBag.department = department;
            }

            return View();
        }

        public ActionResult GetVulnerabilityRpt(string sDate, string eDate, string result, string filterType, string department, string user)
        {

            string sdateTime = sDate;
            string edateTime = eDate;

            DateTime sdt = Convert.ToDateTime(sdateTime).Date;
            DateTime edt = Convert.ToDateTime(edateTime).Date;
            var data = _unitofwork.ReportRepo.GetAllPCTOOLsByRangeAndFilterType(sdt, edt, result, filterType, department, user);

            return PartialView("_pcVulnerabilityRpt", data);
        }

        public ActionResult ExportExcelVulnerabilityRpt(string sDate, string eDate, string result, string filterType, string department, string user)
        {

            string sdateTime = sDate;
            string edateTime = eDate;

            DateTime sdt = Convert.ToDateTime(sdateTime).Date;
            DateTime edt = Convert.ToDateTime(edateTime).Date;
            var data = _unitofwork.ReportRepo.GetAllPCTOOLsByRangeAndFilterType(sdt, edt, result, filterType, department, user).ToList();
            if (data.Count > 0)
            {
                string[] columns = { "Computer_Name","Operating_System","Description","InstallDate","SerialNumber","ServicePackMajorVersion","WindowsDirectory",
                     "Serial_Number","System_IP","User_Name","DepartName","Symantec_Installed","Windows_update","Waterwall_Installed","Privacy_i_Installed","Print_Agent",
                    "E_Doc","PI_Count","Shared_Folder_List","Shared_Folder_count","Port_80_disabled","Port_22_disabled","Port_20_disabled","Port_23_disabled",
                   "Port_25_disabled","Port_443_disabled","Guest_Account_disabled","Local_admin_list","IE_Verson_above_8","sys_date","sys_time","Screen_saver_Secure",
                    "Screen_Saver_time","Screen_Saver_Avtive","SNMP_Services_disabled","PC_type","AD_check","Version","Result","Manufacturer","Model","System_Type",
                    "Mac_Dec","MAC_Add","Processor","Physical_Memory","HDD_Model","HDD_Size","HDD_SrNo","GetIEVersion","FailResult","Nethelper"};
                byte[] filecontent = ExcelExportHelper.ExportExcel(data, "PC Vulnerability Report", true, columns);
                return File(filecontent, ExcelExportHelper.ExcelContentType, "VulnerabilityRpt.xlsx");
            }
            return RedirectToAction("PcVulnerabilityReport", "Report");
        }

        public ActionResult ExportExcelVulnerabilitySummRpt(string sDate, string eDate, string result, string filterType, string department, string user)
        {

            string sdateTime = sDate;
            string edateTime = eDate;

            DateTime sdt = Convert.ToDateTime(sdateTime).Date;
            DateTime edt = Convert.ToDateTime(edateTime).Date;
            var data = _unitofwork.ReportRepo.GetAllPCTOOLsByRangeAndFilterType(sdt, edt, result, filterType, department, user);

            if (data.IsNotBlank())
            {
                var query = from o in data
                            orderby o.sys_date
                            group o by o.Computer_Name into g
                            select new PCToolSummaryModels
                            {
                                Computer_Name = g.Key,
                                User_Name = g.Where(m => m.Computer_Name == g.Key).FirstOrDefault().User_Name,
                                Operating_System = g.Where(m => m.Computer_Name == g.Key).FirstOrDefault().Operating_System,
                                DepartName = g.Where(m => m.Computer_Name == g.Key).FirstOrDefault().DepartName,
                                Waterwall_Installed = g.Sum(d => d.Waterwall_Installed.TrimData() == "N" ? 1 : 0),
                                E_Doc = g.Sum(d => d.E_Doc.TrimData() == "N" ? 1 : 0),
                                Guest_Account_disabled = g.Sum(d => d.Guest_Account_disabled.TrimData() == "N" ? 1 : 0),
                                IE_Verson_above_8 = g.Sum(d => d.IE_Verson_above_8.TrimData() == "N" ? 1 : 0),
                                PI_Count = g.Sum(d => d.PI_Count.TrimData() == "N" ? 1 : 0),
                                Port_20_disabled = g.Sum(d => d.Port_20_disabled.TrimData() == "N" ? 1 : 0),
                                Port_22_disabled = g.Sum(d => d.Port_22_disabled.TrimData() == "N" ? 1 : 0),
                                Port_23_disabled = g.Sum(d => d.Port_23_disabled.TrimData() == "N" ? 1 : 0),
                                Port_25_disabled = g.Sum(d => d.Port_25_disabled.TrimData() == "N" ? 1 : 0),
                                Port_443_disabled = g.Sum(d => d.Port_443_disabled.TrimData() == "N" ? 1 : 0),
                                Port_80_disabled = g.Sum(d => d.Port_80_disabled.TrimData() == "N" ? 1 : 0),
                                Print_Agent = g.Sum(d => d.Print_Agent.TrimData() == "N" ? 1 : 0),
                                Privacy_i_Installed = g.Sum(d => d.Privacy_i_Installed.TrimData() == "N" ? 1 : 0),
                                Screen_Saver_Avtive = g.Sum(d => d.Screen_Saver_Avtive.TrimData() == "N" ? 1 : 0),
                                Screen_saver_Secure = g.Sum(d => d.Screen_saver_Secure.TrimData() == "N" ? 1 : 0),
                                Shared_Folder_count = g.Sum(d => d.Shared_Folder_count.TrimData() == "Y" ? 1 : 0),
                                SNMP_Services_disabled = g.Sum(d => d.SNMP_Services_disabled.TrimData() == "N" ? 1 : 0),
                                // Shared_Folder_List = g.Sum(d => d.Shared_Folder_List.TrimData() == "N" ? 1 : 0),
                                Symantec_Installed = g.Sum(d => d.Symantec_Installed.TrimData() == "N" ? 1 : 0),
                                Windows_update = g.Sum(d => d.Windows_update.TrimData() == "N" ? 1 : 0),

                            };

                var dataNew = query.ToList();

                if (dataNew.Count > 0)
                {
                    string[] columns = { "Computer_Name","Operating_System","User_Name","DepartName","Symantec_Installed","Windows_update","Waterwall_Installed","Privacy_i_Installed","Print_Agent",
                    "E_Doc","PI_Count","Shared_Folder_count","Port_80_disabled","Port_22_disabled","Port_20_disabled","Port_23_disabled",
                   "Port_25_disabled","Port_443_disabled","Guest_Account_disabled","IE_Verson_above_8","Screen_saver_Secure",
                    "Screen_Saver_Avtive","SNMP_Services_disabled"};
                    byte[] filecontent = ExcelExportHelper.ExportExcel(dataNew, "Vulnerability Summary Report", true, columns);
                    return File(filecontent, ExcelExportHelper.ExcelContentType, "VulnerabilitySummRpt.xlsx");
                }

            }

            return RedirectToAction("VulnerabilitySummaryReport", "Report");
        }

        public ActionResult ExportExcelPcDetailRpt(string sDate, string eDate)
        {

            string sdateTime = sDate;
            string edateTime = eDate;

            DateTime sdt = Convert.ToDateTime(sdateTime).Date;
            DateTime edt = Convert.ToDateTime(edateTime).Date;
            var data = _unitofwork.ReportRepo.GetAllPCTOOLListInRange(sdt, edt).ToList();

            if (data.Count > 0)
            {
                string[] columns = { "Computer_Name","Operating_System","System_IP","User_Name","sys_date","sys_time","PC_type","AD_check","Version","InstallDate","SerialNumber","ServicePackMajorVersion","Result","Manufacturer","Model","System_Type",
                    "Mac_Dec","MAC_Add","Processor","Physical_Memory","HDD_Model","HDD_Size","HDD_SrNo","GetIEVersion","FailResult","Nethelper"};
                byte[] filecontent = ExcelExportHelper.ExportExcel(data, "PC Detail Report", true, columns);
                return File(filecontent, ExcelExportHelper.ExcelContentType, "Pc_DetailRpt.xlsx");
            }
            return RedirectToAction("PcDetailReport", "Report");
        }

        public ActionResult ExportExcelSoftwareRpt(string filterType, string userName, string compName, string software, string version)
        {

            var data = _unitofwork.ReportRepo.GetPcToolSoft();

            if (filterType == "userwise")
            {


                if (compName.IsNotBlank())
                {
                    data = data.Where(m => m.User_Name == userName && m.Computer_Name == compName).ToList();
                }
                else
                {
                    data = data.Where(m => m.User_Name == userName).ToList();
                }
            }
            else
            {
                if (version.IsNotBlank())
                {
                    data = data.Where(m => m.Software_Name == software && m.Version == version).ToList();
                }
                else
                {
                    data = data.Where(m => m.Software_Name == software).ToList();
                }
            }
            if (data.Count > 0)
            {
                string[] columns = { "Computer_Name", "User_Name", "Software_Name", "User_Name", "Version" };
                byte[] filecontent = ExcelExportHelper.ExportExcel(data.ToList(), "PC Software Report", true, columns);
                return File(filecontent, ExcelExportHelper.ExcelContentType, "Pc_SoftwareRpt.xlsx");
            }
            return RedirectToAction("PcSoftwareReport", "Report");

        }

        public ActionResult ExportExcelIllegalSoftwareRpt(string filterType, string userName, string compName, string software, string version)
        {

            var data = _unitofwork.ReportRepo.GetIllegalSoftware();

            if (filterType == "userwise")
            {


                if (compName.IsNotBlank())
                {
                    data = data.Where(m => m.User_Name == userName && m.Computer_Name == compName).ToList();
                }
                else
                {
                    data = data.Where(m => m.User_Name == userName).ToList();
                }
            }
            else
            {
                if (version.IsNotBlank())
                {
                    data = data.Where(m => m.Software_Name == software && m.Version == version).ToList();
                }
                else
                {
                    data = data.Where(m => m.Software_Name == software).ToList();
                }
            }
            if (data.Count > 0)
            {
                string[] columns = { "Computer_Name", "User_Name", "Software_Name", "User_Name", "Version" };
                byte[] filecontent = ExcelExportHelper.ExportExcel(data.ToList(), "Illegal Software Report", true, columns);
                return File(filecontent, ExcelExportHelper.ExcelContentType, "Illegal_SoftwareRpt.xlsx");
            }
            return RedirectToAction("IllegalSoftReport", "Report");

        }


        public ActionResult PcDetailReport()
        {
            //            var data = _unitofwork.ReportRepo.GetAllPCTOOLs();

            return View();
        }

        public ActionResult GetPcDetailRpt(string sDate, string eDate)
        {

            string sdateTime = sDate;
            string edateTime = eDate;

            DateTime sdt = Convert.ToDateTime(sdateTime).Date;
            DateTime edt = Convert.ToDateTime(edateTime).Date;
            var data = _unitofwork.ReportRepo.GetAllPCTOOLListInRange(sdt, edt);
            return PartialView("_pcDetailRpt", data);
        }

        public ActionResult PcSoftwareReport()
        {
            var rawdata = _unitofwork.ReportRepo.GetPcToolSoft();
            var allUsers = rawdata.Select(m => new ddlPcToolSoftwareUserModel { UserName = m.User_Name, UserID = m.ID.To<string>() }).GroupBy(x => x.UserName, (key, group) => group.First()).OrderBy(i => i.UserName).ToList();
            var allSoftwares = rawdata.Select(m => new ddlPcToolSoftwareModel { SoftwareName = m.Software_Name, Version = m.Version }).GroupBy(x => x.SoftwareName, (key, group) => group.First()).Distinct().OrderBy(i => i.SoftwareName).ToList();
            ViewBag.allSoftwares = allSoftwares;
            ViewBag.allUsers = allUsers;
            return View();
        }


        [AcceptVerbs(HttpVerbs.Get)]
        public JsonResult GetAllComputerNameByUserID(string UserID)
        {
            if (!string.IsNullOrEmpty(UserID))
            {
                var rawdata = _unitofwork.ReportRepo.GetPcToolSoft().Where(m => m.User_Name == UserID).Select(m => m.Computer_Name).Distinct().ToList();

                return Json(rawdata.Select(m => new SelectListItem() { Value = m.ToString(), Text = m }), JsonRequestBehavior.AllowGet);
            }
            return null;
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public JsonResult GetAllVersionByUSoftware(string software)
        {
            if (!string.IsNullOrEmpty(software))
            {
                var rawdata = _unitofwork.ReportRepo.GetPcToolSoft().Where(m => m.Software_Name == software).Select(m => m.Version).Distinct().ToList();

                return Json(rawdata.Select(m => new SelectListItem() { Value = m.ToString(), Text = m }), JsonRequestBehavior.AllowGet);
            }

            return null;
        }



        public ActionResult GetPcSoftwareRpt(string filterType, string userName, string compName, string software, string version)
        {

            var data = _unitofwork.ReportRepo.GetPcToolSoft();

            if (filterType == "userwise")
            {


                if (compName.IsNotBlank())
                {
                    data = data.Where(m => m.User_Name == userName && m.Computer_Name == compName).ToList();
                }
                else
                {
                    data = data.Where(m => m.User_Name == userName).ToList();
                }
            }
            else
            {
                if (version.IsNotBlank())
                {
                    data = data.Where(m => m.Software_Name == software && m.Version == version).ToList();
                }
                else
                {
                    data = data.Where(m => m.Software_Name == software).ToList();
                }
            }
            return PartialView("_pcSoftwareRpt", data);
        }


        public ActionResult VulnerabilitySummaryReport()
        {

            DateTime sdt = DateTime.Now.Date.AddDays(-15);
            DateTime edt = DateTime.Now.Date;
            var data = _unitofwork.ReportRepo.GetAllPCTOOLListInRange(sdt, edt);

            if (data.IsNotBlank())
            {
                var department = data.Select(m => new ddlPcToolDepartmentModel { DepartmentName = m.DepartName }).GroupBy(x => x.DepartmentName, (key, group) => group.First()).OrderBy(i => i.DepartmentName).ToList();
                var users = data.Select(m => new ddlPcToolUserModel { UserName = m.User_Name }).GroupBy(x => x.UserName, (key, group) => group.First()).OrderBy(i => i.UserName).ToList();

                ViewBag.users = users;
                ViewBag.department = department;
            }

            return View();
        }

        public ActionResult GetVulnerabilitySummaryRpt(string sDate, string eDate, string result, string filterType, string department, string user)
        {

            string sdateTime = sDate;
            string edateTime = eDate;

            DateTime sdt = Convert.ToDateTime(sdateTime).Date;
            DateTime edt = Convert.ToDateTime(edateTime).Date;
            var data = _unitofwork.ReportRepo.GetAllPCTOOLsByRangeAndFilterType(sdt, edt, result, filterType, department, user);

            if (data.IsNotBlank())
            {


                var query = from o in data
                            orderby o.sys_date
                            group o by o.Computer_Name into g
                            select new PCToolSummaryModels
                            {
                                Computer_Name = g.Key,
                                User_Name = g.Where(m => m.Computer_Name == g.Key).FirstOrDefault().User_Name,
                                Operating_System = g.Where(m => m.Computer_Name == g.Key).FirstOrDefault().Operating_System,
                                DepartName = g.Where(m => m.Computer_Name == g.Key).FirstOrDefault().DepartName,
                                Waterwall_Installed = g.Sum(d => d.Waterwall_Installed.TrimData() == "N" ? 1 : 0),
                                E_Doc = g.Sum(d => d.E_Doc.TrimData() == "N" ? 1 : 0),
                                Guest_Account_disabled = g.Sum(d => d.Guest_Account_disabled.TrimData() == "N" ? 1 : 0),
                                IE_Verson_above_8 = g.Sum(d => d.IE_Verson_above_8.TrimData() == "N" ? 1 : 0),
                                PI_Count = g.Sum(d => d.PI_Count.TrimData() == "N" ? 1 : 0),
                                Port_20_disabled = g.Sum(d => d.Port_20_disabled.TrimData() == "N" ? 1 : 0),
                                Port_22_disabled = g.Sum(d => d.Port_22_disabled.TrimData() == "N" ? 1 : 0),
                                Port_23_disabled = g.Sum(d => d.Port_23_disabled.TrimData() == "N" ? 1 : 0),
                                Port_25_disabled = g.Sum(d => d.Port_25_disabled.TrimData() == "N" ? 1 : 0),
                                Port_443_disabled = g.Sum(d => d.Port_443_disabled.TrimData() == "N" ? 1 : 0),
                                Port_80_disabled = g.Sum(d => d.Port_80_disabled.TrimData() == "N" ? 1 : 0),
                                Print_Agent = g.Sum(d => d.Print_Agent.TrimData() == "N" ? 1 : 0),
                                Privacy_i_Installed = g.Sum(d => d.Privacy_i_Installed.TrimData() == "N" ? 1 : 0),
                                Screen_Saver_Avtive = g.Sum(d => d.Screen_Saver_Avtive.TrimData() == "N" ? 1 : 0),
                                Screen_saver_Secure = g.Sum(d => d.Screen_saver_Secure.TrimData() == "N" ? 1 : 0),
                                Shared_Folder_count = g.Sum(d => d.Shared_Folder_count.TrimData() == "Y" ? 1 : 0),
                                SNMP_Services_disabled = g.Sum(d => d.SNMP_Services_disabled.TrimData() == "N" ? 1 : 0),
                                // Shared_Folder_List = g.Sum(d => d.Shared_Folder_List.TrimData() == "N" ? 1 : 0),
                                Symantec_Installed = g.Sum(d => d.Symantec_Installed.TrimData() == "N" ? 1 : 0),
                                Windows_update = g.Sum(d => d.Windows_update.TrimData() == "N" ? 1 : 0),

                            };

                var dataNew = query.ToList();

                return PartialView("_vulnerabilitySummaryRpt", dataNew);

            }

            return PartialView("_vulnerabilitySummaryRpt");
        }

        public ActionResult IllegalSoftReport()
        {
            var rawdata = _unitofwork.ReportRepo.GetIllegalSoftware();
            var allUsers = rawdata.Select(m => new ddlPcToolSoftwareUserModel { UserName = m.User_Name, UserID = m.ID.To<string>() }).GroupBy(x => x.UserName, (key, group) => group.First()).OrderBy(i => i.UserName).ToList();
            var allSoftwares = rawdata.Select(m => new ddlPcToolSoftwareModel { SoftwareName = m.Software_Name, Version = m.Version }).GroupBy(x => x.SoftwareName, (key, group) => group.First()).Distinct().OrderBy(i => i.SoftwareName).ToList();
            ViewBag.allSoftwares = allSoftwares;
            ViewBag.allUsers = allUsers;
            
            return View();
        }
        public ActionResult GetIllegalSoftwareRpt(string filterType, string userName, string compName, string software, string version)
        {

            var data = _unitofwork.ReportRepo.GetIllegalSoftware();

            if (filterType == "userwise")
            {


                if (compName.IsNotBlank())
                {
                    data = data.Where(m => m.User_Name == userName && m.Computer_Name == compName).ToList();
                }
                else
                {
                    data = data.Where(m => m.User_Name == userName).ToList();
                }
            }
            else
            {
                if (version.IsNotBlank())
                {
                    data = data.Where(m => m.Software_Name == software && m.Version == version).ToList();
                }
                else
                {
                    data = data.Where(m => m.Software_Name == software).ToList();
                }
            }
            return PartialView("_illegalSoftwareRpt", data);
        }
        
    }
}