using System;
using System.Globalization;
using System.Linq;
using System.Security.Claims;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin.Security;
using PcVulnerability.Models;
using Microsoft.AspNet.Identity.EntityFramework;
using PCV.DAL.UnitOfWork;
using PCV.DAL.ViewModels;

namespace PcVulnerability.Controllers
{
    [Authorize]
    public class AccountController : Controller
    {
        private ApplicationSignInManager _signInManager;
        private ApplicationUserManager _userManager;
        private RoleManager<IdentityRole> _roleManager;
        private IUnitOfWork _unitofwork;
        public AccountController()
        {
            _roleManager = new RoleManager<IdentityRole>(new RoleStore<IdentityRole>(new ApplicationDbContext()));
            _unitofwork = new UnitOfWork(new PCV.Entities.PCVEntities());
        }

        public AccountController(ApplicationUserManager userManager, ApplicationSignInManager signInManager)
        {
            UserManager = userManager;
            SignInManager = signInManager;

        }

        public ApplicationSignInManager SignInManager
        {
            get
            {
                return _signInManager ?? HttpContext.GetOwinContext().Get<ApplicationSignInManager>();
            }
            private set
            {
                _signInManager = value;
            }
        }

        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            private set
            {
                _userManager = value;
            }
        }

        //
        // GET: /Account/Login
        [AllowAnonymous]
        public ActionResult Login(string returnUrl,string message)
        {
            ViewBag.ReturnUrl = returnUrl;

            if (message.IsNotBlank())
            {
                ViewBag.message = message;
            }
            return View();
        }

        //
        // POST: /Account/Login
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Login(LoginViewModel model, string returnUrl)
        {

            if (model.UserName.IndexOf('@') > -1)
            {
                //Validate email format
                string emailRegex = @"^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}" +
                                       @"\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\" +
                                          @".)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$";
                Regex re = new Regex(emailRegex);
                if (!re.IsMatch(model.UserName))
                {
                    ModelState.AddModelError("UserName", "Email is not valid");
                }
            }
            else
            {
                //validate Username format
                string emailRegex = @"^[a-zA-Z0-9_.-]*$";
                Regex re = new Regex(emailRegex);
                if (!re.IsMatch(model.UserName))
                {
                    ModelState.AddModelError("UserName", "Username is not valid");
                }
            }
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            string username = model.UserName;

            if (username.Contains('@'))
            {
                var usr = UserManager.FindByEmail(model.UserName);

                if (usr != null)
                {
                    username = usr.UserName;

                }
                // to update user.....
                //usr.PhoneNumber = "8745099801";
                //    var rrr = await UserManager.UpdateAsync(usr);
            }


            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, change to shouldLockout: true
            var result = await SignInManager.PasswordSignInAsync(username, model.Password, model.RememberMe, shouldLockout: false);
            switch (result)
            {
                case SignInStatus.Success:
                    {
                        var user = await UserManager.FindByNameAsync(username);

                        if (user != null)
                        {
                            var role = user.Roles.Where(m => m.UserId == user.Id).FirstOrDefault();
                            #region Set Session variables=========
                            MySession.Current.RoleID = role.RoleId;
                            MySession.Current.UserId = user.Id;
                            MySession.Current.UserName = user.UserName;
                            MySession.Current.RoleName = UserManager.GetRoles(user.Id).FirstOrDefault();
                            var defaultSite = _unitofwork.HomeRepo.GetDefaultSiteByUserId(user.Id);

                            if (defaultSite.IsNotBlank())
                            {
                                // if Url not matches with site url

                                //string url = Request.Url.GetLeftPart(UriPartial.Authority);
                                //if (url!= defaultSite.SiteUrl)
                                //{
                                //    return RedirectToAction("LogOff", "Account", new { message = "You are not authorized to acess this url !" });
                                //}

                                // else if url  matches with site url 
                                MySession.Current.SiteId = defaultSite.ID.To<string>();
                                MySession.Current.ConnString = _unitofwork.CommonRepo.GetConString(defaultSite.Server_IP, defaultSite.Database_Name, defaultSite.Database_ID, defaultSite.Database_PW);
                            }


                            #endregion


                            if (returnUrl.IsNotBlank())
                            {
                                return RedirectToLocal(returnUrl);
                            }
                            return RedirectToAction("DashReport", "Report");
                        }


                        return RedirectToLocal(returnUrl);

                    }
                case SignInStatus.LockedOut:
                    return View("Lockout");
                case SignInStatus.RequiresVerification:
                    return RedirectToAction("SendCode", new { ReturnUrl = returnUrl, RememberMe = model.RememberMe });
                case SignInStatus.Failure:
                default:
                    ModelState.AddModelError("", "Invalid login attempt.");
                    return View(model);
            }
        }

        //
        // GET: /Account/VerifyCode
        [AllowAnonymous]
        public async Task<ActionResult> VerifyCode(string provider, string returnUrl, bool rememberMe)
        {
            // Require that the user has already logged in via username/password or external login
            if (!await SignInManager.HasBeenVerifiedAsync())
            {
                return View("Error");
            }
            return View(new VerifyCodeViewModel { Provider = provider, ReturnUrl = returnUrl, RememberMe = rememberMe });
        }


        public ActionResult UserType(string utypeId)
        {
            var model = new RoleViewModel();
            if (!string.IsNullOrEmpty(utypeId))
            {
                model = _roleManager.Roles.Select(m => new RoleViewModel()
                {
                    Id = m.Id,
                    Name = m.Name
                }).Where(m => m.Id == utypeId).FirstOrDefault();
            }
            return View(model);
        }
        [HttpPost]
        public async Task<ActionResult> UserType(RoleViewModel roleViewModel)
        {
            if (ModelState.IsValid)
            {
                var role = new IdentityRole(roleViewModel.Name);
                if (string.IsNullOrEmpty(roleViewModel.Id))
                {
                    var roleresult = await _roleManager.CreateAsync(role);
                    if (!roleresult.Succeeded)
                    {
                        ModelState.AddModelError("", roleresult.Errors.First());
                        return View(roleViewModel);
                    }
                }
                else
                {
                    var getRole = _roleManager.Roles.Where(m => m.Id == roleViewModel.Id).FirstOrDefault();
                    getRole.Name = roleViewModel.Name;
                    var roleresult = await _roleManager.UpdateAsync(getRole);
                    if (!roleresult.Succeeded)
                    {
                        ModelState.AddModelError("", roleresult.Errors.First());
                        return View(roleViewModel);
                    }

                }




                return RedirectToAction("UserTypeList");
            }
            return View();

        }

        public ActionResult UserTypeList()
        {

            var list = _roleManager.Roles.Select(m => new RoleViewModel()
            {

                Id = m.Id,
                Name = m.Name
            }).ToList();

            return View(list);
        }

        //
        // POST: /Account/VerifyCode
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> VerifyCode(VerifyCodeViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            // The following code protects for brute force attacks against the two factor codes. 
            // If a user enters incorrect codes for a specified amount of time then the user account 
            // will be locked out for a specified amount of time. 
            // You can configure the account lockout settings in IdentityConfig
            var result = await SignInManager.TwoFactorSignInAsync(model.Provider, model.Code, isPersistent: model.RememberMe, rememberBrowser: model.RememberBrowser);
            switch (result)
            {
                case SignInStatus.Success:
                    return RedirectToLocal(model.ReturnUrl);
                case SignInStatus.LockedOut:
                    return View("Lockout");
                case SignInStatus.Failure:
                default:
                    ModelState.AddModelError("", "Invalid code.");
                    return View(model);
            }
        }

        //
        // GET: /Account/Register
        [AllowAnonymous]
        public ActionResult Register()
        {
            return View();
        }

        //
        // POST: /Account/Register
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Register(RegisterViewModel model)
        {
            if (ModelState.IsValid)
            {
                var user = new ApplicationUser { UserName = model.UserName, Email = model.Email };
                var result = await UserManager.CreateAsync(user, model.Password);
                if (result.Succeeded)
                {
                    UserManager.AddToRole(user.Id, "Super Admin");
                    await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);

                    // For more information on how to enable account confirmation and password reset please visit https://go.microsoft.com/fwlink/?LinkID=320771
                    // Send an email with this link
                    // string code = await UserManager.GenerateEmailConfirmationTokenAsync(user.Id);
                    // var callbackUrl = Url.Action("ConfirmEmail", "Account", new { userId = user.Id, code = code }, protocol: Request.Url.Scheme);
                    // await UserManager.SendEmailAsync(user.Id, "Confirm your account", "Please confirm your account by clicking <a href=\"" + callbackUrl + "\">here</a>");

                    return RedirectToAction("Index", "Home");


                }
                AddErrors(result);
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }


        public ActionResult CreateUser(string userId)
        {
            var data = new RegisterUserViewModel();

            if (userId.IsNotBlank())
            {

                var user = UserManager.FindById(userId);

                data.Id = user.Id;
                data.FirstName = user.FirstName;
                data.LastName = user.LastName;
                data.PasswordHash = user.PasswordHash;
                data.UserName = user.UserName;
                data.Email = user.Email;
                data.RoleId = user.Roles.Where(m => m.UserId == user.Id).FirstOrDefault().RoleId;
                data.InActive = user.InActive;

            }
            var roleList = _roleManager.Roles.Select(m => new DDLRoleModel()
            {

                RoleId = m.Id,
                RoleName = m.Name
            }).Where(m => m.RoleName != "Super Admin").ToList();
            ViewBag.roles = roleList;



            return View(data);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> CreateUser(RegisterUserViewModel model)
        {
            if (model.Id.IsBlank())
            {
                if (ModelState.IsValid)
                {
                    var user = new ApplicationUser { UserName = model.UserName, Email = model.Email, FirstName = model.FirstName, LastName = model.LastName, InActive = model.InActive };
                    var result = await UserManager.CreateAsync(user, model.Password);
                    if (result.Succeeded)
                    {
                        var role = _roleManager.Roles.Where(m => m.Id == model.RoleId).FirstOrDefault();
                        if (role.IsNotBlank())
                        {
                            UserManager.AddToRole(user.Id, role.Name);
                        }
                        return RedirectToAction("UserList", "Account");

                    }
                    AddErrors(result);
                }

            }
            else
            {
                var userDetail = UserManager.FindById(model.Id);
                userDetail.UserName = model.UserName;
                userDetail.FirstName = model.FirstName;
                userDetail.LastName = model.LastName;
                userDetail.Email = model.Email;
                userDetail.InActive = model.InActive;

                // var user = new ApplicationUser {Id=user.i UserName = model.UserName, Email = model.Email, FirstName = model.FirstName, LastName = model.LastName, InActive = model.InActive };
                var result = UserManager.Update(userDetail);
                if (result.Succeeded)
                {
                    var roleId = userDetail.Roles.Where(m => m.UserId == userDetail.Id).FirstOrDefault().RoleId;
                    if (roleId != model.RoleId)
                    {
                        var newrole = _roleManager.Roles.Where(m => m.Id == model.RoleId).FirstOrDefault();
                        var oldRole = _roleManager.Roles.Where(m => m.Id == roleId).FirstOrDefault();
                        if (newrole.IsNotBlank())
                        {
                            UserManager.RemoveFromRole(userDetail.Id, oldRole.Name);
                            UserManager.AddToRole(userDetail.Id, newrole.Name);
                        }
                    }
                    return RedirectToAction("UserList", "Account");

                }
                AddErrors(result);

            }

            // If we got this far, something failed, redisplay form
            var roleList = _roleManager.Roles.Select(m => new DDLRoleModel()
            {

                RoleId = m.Id,
                RoleName = m.Name
            }).Where(m => m.RoleName != "Super Admin").ToList();
            ViewBag.roles = roleList;
            return View(model);
        }

        public ActionResult UserList()
        {
            var rawdata = UserManager.Users.ToList();
            var data = rawdata.Select(m => new UserViewModel()
            {

                UserId = m.Id,
                UserName = m.UserName,
                FirstName = m.FirstName,
                LastName = m.LastName,
                Email = m.Email,
                InActive = m.InActive,
                RoleName = UserManager.GetRoles(m.Id).FirstOrDefault(),

            }).Where(m => m.RoleName != "Super Admin").ToList();
            return View(data);
        }

        public ActionResult InacticvateOrActivateUser(string userId)
        {
            var userDetail = UserManager.FindById(userId);

            userDetail.InActive = userDetail.InActive == true ? false : true;

            var result = UserManager.Update(userDetail);
            if (result.Succeeded)
            {
                return RedirectToAction("UserList", "Account");
            }
            return RedirectToAction("UserList", "Account");
        }
        //
        // GET: /Account/ConfirmEmail
        [AllowAnonymous]
        public async Task<ActionResult> ConfirmEmail(string userId, string code)
        {
            if (userId == null || code == null)
            {
                return View("Error");
            }
            var result = await UserManager.ConfirmEmailAsync(userId, code);
            return View(result.Succeeded ? "ConfirmEmail" : "Error");
        }

        //
        // GET: /Account/ForgotPassword
        [AllowAnonymous]
        public ActionResult ForgotPassword()
        {
            return View();
        }

        //
        // POST: /Account/ForgotPassword
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ForgotPassword(ForgotPasswordViewModel model)
        {
            if (ModelState.IsValid)
            {
                var user = await UserManager.FindByEmailAsync(model.Email);
                //if (user == null || !(await UserManager.IsEmailConfirmedAsync(user.Id)))
                if (user == null)
                {
                    // Don't reveal that the user does not exist or is not confirmed
                    return View("ForgotPasswordConfirmation");
                }

                // For more information on how to enable account confirmation and password reset please visit https://go.microsoft.com/fwlink/?LinkID=320771
                // Send an email with this link
                //string code = await UserManager.GeneratePasswordResetTokenAsync(user.Id);
                //var callbackUrl = Url.Action("ResetPassword", "Account", new { userId = user.Id, code = code }, protocol: Request.Url.Scheme);
                //await UserManager.SendEmailAsync(user.Id, "Reset Password", "Please reset your password by clicking <a href=\"" + callbackUrl + "\">here</a>");
                string code = await UserManager.GeneratePasswordResetTokenAsync(user.Id);
                var callbackUrl = Url.Action("ResetPassword", "Account", new { userId = user.Id, code = code }, protocol: Request.Url.Scheme);
                _unitofwork.CommonRepo.SendEmail_ResetPassword(user.UserName, user.Email, callbackUrl);
                return RedirectToAction("ForgotPasswordConfirmation", "Account");
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        //
        // GET: /Account/ForgotPasswordConfirmation
        [AllowAnonymous]
        public ActionResult ForgotPasswordConfirmation()
        {
            return View();
        }

        //
        // GET: /Account/ResetPassword
        [AllowAnonymous]
        public ActionResult ResetPassword(string code)
        {
            return code == null ? View("Error") : View();
        }

        //
        // POST: /Account/ResetPassword
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ResetPassword(ResetPasswordViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }
            var user = await UserManager.FindByNameAsync(model.Email);
            if (user == null)
            {
                // Don't reveal that the user does not exist
                return RedirectToAction("ResetPasswordConfirmation", "Account");
            }
            var result = await UserManager.ResetPasswordAsync(user.Id, model.Code, model.Password);
            if (result.Succeeded)
            {
                return RedirectToAction("ResetPasswordConfirmation", "Account");
            }
            AddErrors(result);
            return View();
        }

        //
        // GET: /Account/ResetPasswordConfirmation
        [AllowAnonymous]
        public ActionResult ResetPasswordConfirmation()
        {
            return View();
        }

        //
        // POST: /Account/ExternalLogin
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult ExternalLogin(string provider, string returnUrl)
        {
            // Request a redirect to the external login provider
            return new ChallengeResult(provider, Url.Action("ExternalLoginCallback", "Account", new { ReturnUrl = returnUrl }));
        }

        //
        // GET: /Account/SendCode
        [AllowAnonymous]
        public async Task<ActionResult> SendCode(string returnUrl, bool rememberMe)
        {
            var userId = await SignInManager.GetVerifiedUserIdAsync();
            if (userId == null)
            {
                return View("Error");
            }
            var userFactors = await UserManager.GetValidTwoFactorProvidersAsync(userId);
            var factorOptions = userFactors.Select(purpose => new SelectListItem { Text = purpose, Value = purpose }).ToList();
            return View(new SendCodeViewModel { Providers = factorOptions, ReturnUrl = returnUrl, RememberMe = rememberMe });
        }

        //
        // POST: /Account/SendCode
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> SendCode(SendCodeViewModel model)
        {
            if (!ModelState.IsValid)
            {
                return View();
            }

            // Generate the token and send it
            if (!await SignInManager.SendTwoFactorCodeAsync(model.SelectedProvider))
            {
                return View("Error");
            }
            return RedirectToAction("VerifyCode", new { Provider = model.SelectedProvider, ReturnUrl = model.ReturnUrl, RememberMe = model.RememberMe });
        }

        //
        // GET: /Account/ExternalLoginCallback
        [AllowAnonymous]
        public async Task<ActionResult> ExternalLoginCallback(string returnUrl)
        {
            var loginInfo = await AuthenticationManager.GetExternalLoginInfoAsync();
            if (loginInfo == null)
            {
                return RedirectToAction("Login");
            }

            // Sign in the user with this external login provider if the user already has a login
            var result = await SignInManager.ExternalSignInAsync(loginInfo, isPersistent: false);
            switch (result)
            {
                case SignInStatus.Success:
                    return RedirectToLocal(returnUrl);
                case SignInStatus.LockedOut:
                    return View("Lockout");
                case SignInStatus.RequiresVerification:
                    return RedirectToAction("SendCode", new { ReturnUrl = returnUrl, RememberMe = false });
                case SignInStatus.Failure:
                default:
                    // If the user does not have an account, then prompt the user to create an account
                    ViewBag.ReturnUrl = returnUrl;
                    ViewBag.LoginProvider = loginInfo.Login.LoginProvider;
                    return View("ExternalLoginConfirmation", new ExternalLoginConfirmationViewModel { Email = loginInfo.Email });
            }
        }

        //
        // POST: /Account/ExternalLoginConfirmation
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ExternalLoginConfirmation(ExternalLoginConfirmationViewModel model, string returnUrl)
        {
            if (User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Index", "Manage");
            }

            if (ModelState.IsValid)
            {
                // Get the information about the user from the external login provider
                var info = await AuthenticationManager.GetExternalLoginInfoAsync();
                if (info == null)
                {
                    return View("ExternalLoginFailure");
                }
                var user = new ApplicationUser { UserName = model.Email, Email = model.Email };
                var result = await UserManager.CreateAsync(user);
                if (result.Succeeded)
                {
                    result = await UserManager.AddLoginAsync(user.Id, info.Login);
                    if (result.Succeeded)
                    {
                        await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);
                        // return RedirectToLocal(returnUrl);
                        return RedirectToAction("SetPassword", "Manage");
                    }
                }
                AddErrors(result);
            }

            ViewBag.ReturnUrl = returnUrl;
            return View(model);
        }

        //
        // POST: /Account/LogOff
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult LogOff()
        //{
        //    AuthenticationManager.SignOut(DefaultAuthenticationTypes.ApplicationCookie);
        //    return RedirectToAction("Index", "Home");
        //}


        [AllowAnonymous]
        [HttpGet]
        public ActionResult LogOff(string message)
        {
            AuthenticationManager.SignOut();
            System.Web.HttpContext.Current.Session.Abandon();
            DataCaching.Clear("cacheMenuList");
            
            return RedirectToAction("Login", "Account",new { message= message });
        }

        //
        // GET: /Account/ExternalLoginFailure
        [AllowAnonymous]
        public ActionResult ExternalLoginFailure()
        {
            return View();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (_userManager != null)
                {
                    _userManager.Dispose();
                    _userManager = null;
                }

                if (_signInManager != null)
                {
                    _signInManager.Dispose();
                    _signInManager = null;
                }
            }

            base.Dispose(disposing);
        }

        #region Helpers
        // Used for XSRF protection when adding external logins
        private const string XsrfKey = "XsrfId";

        private IAuthenticationManager AuthenticationManager
        {
            get
            {
                return HttpContext.GetOwinContext().Authentication;
            }
        }

        private void AddErrors(IdentityResult result)
        {
            foreach (var error in result.Errors)
            {
                ModelState.AddModelError("", error);
            }
        }

        private ActionResult RedirectToLocal(string returnUrl)
        {
            if (Url.IsLocalUrl(returnUrl))
            {
                return Redirect(returnUrl);
            }
            return RedirectToAction("Index", "Home");
        }

        internal class ChallengeResult : HttpUnauthorizedResult
        {
            public ChallengeResult(string provider, string redirectUri)
                : this(provider, redirectUri, null)
            {
            }

            public ChallengeResult(string provider, string redirectUri, string userId)
            {
                LoginProvider = provider;
                RedirectUri = redirectUri;
                UserId = userId;
            }

            public string LoginProvider { get; set; }
            public string RedirectUri { get; set; }
            public string UserId { get; set; }

            public override void ExecuteResult(ControllerContext context)
            {
                var properties = new AuthenticationProperties { RedirectUri = RedirectUri };
                if (UserId != null)
                {
                    properties.Dictionary[XsrfKey] = UserId;
                }
                context.HttpContext.GetOwinContext().Authentication.Challenge(properties, LoginProvider);
            }
        }
        #endregion
    }
}