using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PCV.DAL.UnitOfWork;
using PCV.DAL.ViewModels;
using System.Data.SqlClient;
using System.Data;
using System.Configuration;
using PcVulnerability.Models;
using PcVulnerability.Hubs;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using Microsoft.AspNet.Identity.Owin;
using SignalRWebApp.Models;
using SignalRWebApp.SqlServerNotifier;
using System.Threading.Tasks;
using System.Data.Entity;
using System.Web.UI.DataVisualization.Charting;
using System.Web.UI.WebControls;
using System.IO;
using System.Web.UI;
using PcVulnerability.Helpers;

namespace PcVulnerability.Controllers
{
    public class HomeController : Controller
    {
        readonly string _connString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
        private SignaRTestContext db = new SignaRTestContext();

        #region Fields

        private IUnitOfWork _unitofwork;
        private ApplicationSignInManager _signInManager;
        private ApplicationUserManager _userManager;
        private RoleManager<IdentityRole> _roleManager;



        #endregion

        #region Constructors



        public HomeController()
        {


        }

        public HomeController(ApplicationUserManager userManager, ApplicationSignInManager signInManager, IUnitOfWork unitofwork)
        {
            UserManager = userManager;
            SignInManager = signInManager;
            _unitofwork = unitofwork;
            _roleManager = new RoleManager<IdentityRole>(new RoleStore<IdentityRole>(new ApplicationDbContext()));

        }

        public ApplicationSignInManager SignInManager
        {
            get
            {
                return _signInManager ?? HttpContext.GetOwinContext().Get<ApplicationSignInManager>();
            }
            private set
            {
                _signInManager = value;
            }
        }

        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            private set
            {
                _userManager = value;
            }
        }

        #endregion

        // [Authorize(Roles = "SuperAdmin")]
        public ActionResult Index()
        {

            var data = _unitofwork.HomeRepo.GetAllMenuList();
            return View();
        }

        public ActionResult Dashboard()
        {

            return View();
        }

        #region ==================Menu====================

        public ActionResult MenuList()
        {
            var menuList = _unitofwork.HomeRepo.GetAllMenuList().ToList();

            return View(menuList);
        }
        public ActionResult Menu(string menuId)
        {
            var data = new MenuModel();
            if (menuId.IsNotBlank())
            {
                data = _unitofwork.HomeRepo.GetMenuDetailById(menuId.To<long>());
            }
            var menuList = _unitofwork.HomeRepo.GetAllMenuList().Where(m => m.ParentId == 0).ToList();
            ViewBag.menuList = menuList;

            return View(data);
        }

        [HttpPost]
        public ActionResult Menu(MenuModel model)
        {
            if (model != null)
            {
                var id = _unitofwork.HomeRepo.CreateUpdateMenu(model);
                if (id > 0)
                {
                    ViewBag.Message = "Menu created  successfully!!";

                }

            }

            return RedirectToAction("MenuList", "Home");
        }

        public ActionResult InacticvateOrActivateMenu(string menuId)
        {


            _unitofwork.HomeRepo.UpdateMenuStatusById(menuId.To<long>());
            return RedirectToAction("MenuList", "Home");
        }


        //Remote validation in mvc
        public JsonResult IsPriorityAvaliable(int Priority, string Id)
        {
            if (!string.IsNullOrEmpty(Id))
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var data = _unitofwork.HomeRepo.GetAllMenuList().Where(m => m.Priority == Priority).FirstOrDefault();
                if (data.IsBlank())
                {
                    return Json(true, JsonRequestBehavior.AllowGet);

                }
            }

            return Json(false, JsonRequestBehavior.AllowGet);
        }

        #endregion


        #region ==================Create Edit Region====================

        public ActionResult RegionList()
        {

            var data = _unitofwork.HomeRepo.GetAllRegionList();
            return View(data);
        }

        public ActionResult Region(string regId)
        {
            var data = new RegionModel();
            if (regId.IsNotBlank())
            {
                data = _unitofwork.HomeRepo.GetRegionDetailById(regId.To<long>());
            }

            return View(data);
        }

        [HttpPost]
        public ActionResult Region(RegionModel model)
        {
            if (model != null)
            {
                var id = _unitofwork.HomeRepo.CreateUpdateRegion(model);
                if (id > 0)
                {
                    ViewBag.Message = "Region created  successfully!!";

                }

            }

            return RedirectToAction("RegionList", "Home");
        }


        public ActionResult InacticvateOrActivateRegion(string regId)
        {


            _unitofwork.HomeRepo.UpdateRegionStatusById(regId.To<long>());
            return RedirectToAction("RegionList", "Home");
        }

        #endregion


        #region ==================Create Edit Site Location====================

        public ActionResult SiteLocationList()
        {

            var data = _unitofwork.HomeRepo.GetAllSiteLocList();
            return View(data);
        }

        public ActionResult SiteLocation(string slId)
        {
            var data = new SiteLocationModel();


            if (slId.IsNotBlank())
            {
                data = _unitofwork.HomeRepo.GetSiteLocDetailById(slId.To<long>());
            }
            data.SiteList = _unitofwork.HomeRepo.GetAllSiteList().Select(m => new SiteDDLModel()
            {

                SiteId = m.ID.To<long>(),
                SiteName = m.Site_name
            }).ToList();

            return View(data);
        }

        [HttpPost]
        public ActionResult SiteLocation(SiteLocationModel model)
        {
            if (model != null)
            {
                var id = _unitofwork.HomeRepo.CreateUpdateSiteLoc(model);
                if (id > 0)
                {
                    ViewBag.Message = "Region created  successfully!!";

                }

            }

            return RedirectToAction("SiteLocationList", "Home");
        }

        public ActionResult InacticvateOrActivateSiteLocation(string slId)
        {


            _unitofwork.HomeRepo.UpdateSiteLocationStatusById(slId.To<long>());
            return RedirectToAction("SiteLocationList", "Home");
        }


        #endregion


        #region ==================Create Edit Site====================

        public ActionResult SiteList()
        {
            var data = _unitofwork.HomeRepo.GetAllSiteList();
            if (MySession.Current.UserId.IsNotBlank())
            {

                var userSitesIds = _unitofwork.HomeRepo.GetUserSiteListByUserId(MySession.Current.UserId).Select(m => m.SiteId);

                if (userSitesIds.IsNotBlank())
                {
                    data = data.Where(t => userSitesIds.Contains(t.ID)).ToList();
                }
                else
                {
                    data = new List<SiteModel>();
                }
            }
            return View(data.ToList());
        }


        public PartialViewResult GetSiteDropdown()
        {
            if (MySession.Current.UserId.IsNotBlank())
            {
                var siteList = _unitofwork.HomeRepo.GetUserSiteListByUserId(MySession.Current.UserId).Where(m => m.InActive == false).Select(m => new SiteDDLModel()
                {

                    SiteId = m.SiteId.To<long>(),
                    SiteName = m.SiteName
                }).ToList();

                ViewBag.siteList = siteList;

            }

            return PartialView("_siteDropdown");
        }
        public ActionResult Site(string siteId)
        {
            var data = new SiteModel();

            if (siteId.IsNotBlank())
            {
                data = _unitofwork.HomeRepo.GetSiteDetailById(siteId.To<long>());
            }
            data.RegionList = _unitofwork.HomeRepo.GetAllRegionList();
            return View(data);
        }

        [HttpPost]
        public ActionResult Site(SiteModel model)
        {
            if (model != null)
            {
                model.ConnString = _unitofwork.CommonRepo.GetConString(model.Server_IP, model.Database_Name, model.Database_ID, model.Database_PW);
                var id = _unitofwork.HomeRepo.CreateUpdateSite(model);
                if (id > 0)
                {
                    ViewBag.Message = "Site created  successfully!!";

                }
            }
            return RedirectToAction("SiteList", "Home");
        }


        public ActionResult InacticvateOrActivateSite(string siteId)
        {


            _unitofwork.HomeRepo.UpdateSiteStatusById(siteId.To<long>());
            return RedirectToAction("SiteList", "Home");
        }

        #endregion



        #region ==================Create Edit User  Site ====================

        public ActionResult UserSiteList()
        {
            List<UserSiteModel> model = new List<UserSiteModel>();

            var rawdata = _unitofwork.HomeRepo.GetAllUserSiteList();
            foreach (var item in rawdata)
            {
                UserSiteModel Onemodel = new UserSiteModel();
                Onemodel.Id = item.Id;
                Onemodel.SiteId = item.SiteId;
                Onemodel.UserId = item.UserId;
                Onemodel.UserName = UserManager.Users.Where(m => m.Id == item.UserId).FirstOrDefault().UserName;
                Onemodel.RoleName = _roleManager.Roles.Where(m => m.Id == item.RoleId).FirstOrDefault().Name;
                Onemodel.SiteName = item.SiteName;
                Onemodel.InActive = item.InActive;
                model.Add(Onemodel);
            }


            return View(model);
        }

        public ActionResult UserSite(string usId)
        {
            var data = new UserSiteModel();


            if (usId.IsNotBlank())
            {
                data = _unitofwork.HomeRepo.GetUserSiteDetailById(usId.To<long>());
            }
            data.UserList = UserManager.Users.Where(m => m.InActive == false).Select(m => new UserModel()
            {

                UserId = m.Id,
                UserName = m.UserName
            }).ToList();

            data.SiteList = _unitofwork.HomeRepo.GetAllSiteList().Where(m => m.InActive == false).Select(m => new SiteDDLModel()
            {

                SiteId = m.ID.To<long>(),
                SiteName = m.Site_name
            }).ToList();

            return View(data);
        }

        public ActionResult AssignUserSites()
        {

            var userList = UserManager.Users.Where(m => m.InActive == false).Select(m => new UserModel()
            {

                UserId = m.Id,
                UserName = m.UserName
            }).ToList();

            ViewBag.userList = userList;


            return View();
        }

        public ActionResult _siteListByUserId(string userId)
        {
            var siteList = _unitofwork.HomeRepo.GetAllSiteList();

            if (MySession.Current.RoleName == "Super Admin")
            {
                ViewBag.siteList = siteList;
                var assignedSiteList = _unitofwork.HomeRepo.GetUserSiteListByUserId(userId);
                ViewBag.assignedSiteList = assignedSiteList;
            }
            else
            {
                var userSiteIds = _unitofwork.HomeRepo.GetUserSiteListByUserId(MySession.Current.UserId).Select(m => m.SiteId);
                if (userSiteIds.IsNotBlank())
                {
                    var userSiteList = siteList.Where(t => userSiteIds.Contains(t.ID)).ToList();
                    ViewBag.siteList = userSiteList;
                    var assignedSiteList = _unitofwork.HomeRepo.GetUserSiteListByUserId(userId);
                    ViewBag.assignedSiteList = assignedSiteList;
                }
                else
                {
                    ViewBag.siteList = new List<SiteModel>();
                    ViewBag.assignedSiteList = new List<UserSiteModel>();

                }
            }
            //var assignedSiteList = _unitofwork.HomeRepo.GetUserSiteListByUserId(userId);
            //ViewBag.assignedSiteList = assignedSiteList;
            //ViewBag.siteList = siteList;


            return PartialView("_siteListByUserId");
        }

        [HttpPost]
        public JsonResult AssignUserSites(UserSiteCreateModel model)
        {
            if (model.IsNotBlank())
            {
                _unitofwork.HomeRepo.AddUpdateUserSite(model);
                return Json(new { success = true, message = "Assigned successfully !!" }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { success = false, message = "some error occured !!" }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult UserSite(UserSiteModel model)
        {
            if (model != null)
            {
                var user = UserManager.FindById(model.UserId);

                if (user != null)
                {
                    model.RoleId = user.Roles.Where(m => m.UserId == user.Id).FirstOrDefault().RoleId;

                    var id = _unitofwork.HomeRepo.CreateUpdateUserSite(model);
                    if (id > 0)
                    {
                        ViewBag.Message = "User Site created  successfully!!";

                    }
                }
            }
            return RedirectToAction("UserSiteList", "Home");
        }

        #endregion



        #region===== Assingn Menu In Roles===========

        public ActionResult AssignMenuToRoles()
        {

            var roleList = _roleManager.Roles.Select(m => new DDLRoleModel()
            {

                RoleId = m.Id,
                RoleName = m.Name
            }).ToList();



            if (MySession.Current.RoleName == "Super Admin")
            {
                ViewBag.roles = roleList;
            }
            else
            {
                var userroloes = roleList.Where(m => m.RoleName != "Super Admin").ToList();
                ViewBag.roles = userroloes;
            }


            return View();
        }

        public ActionResult _menuListByRoleId(string roleId)
        {
            var menuList = _unitofwork.HomeRepo.GetAllMenuList();
            var assignedMenuList = _unitofwork.HomeRepo.GetMenusByRoleId(roleId);
            ViewBag.assignedMenuList = assignedMenuList;
            ViewBag.menuList = menuList;


            return PartialView("_menuListByRoleId");
        }


        [HttpPost]
        public JsonResult AssignMenuToRoles(MenuInRoleModel model)
        {
            if (model.IsNotBlank())
            {
                _unitofwork.HomeRepo.AddUpdateMenuInRole(model);
                return Json(new { success = true, message = "Assigned successfully !!" }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { success = false, message = "some error occured !!" }, JsonRequestBehavior.AllowGet);
        }

        #endregion



        #region===== Assingn Menu In users===========

        public ActionResult AssignUserMenus()
        {
            var roleList = UserManager.Users.Where(m => m.InActive == false).Select(m => new DDLUserModel()
            {

                UserId = m.Id,
                UserName = m.UserName
            }).ToList();

            ViewBag.roles = roleList;

            return View();
        }

        public ActionResult _menuListByUserId(string userId)
        {
            var menuList = _unitofwork.HomeRepo.GetAllMenuList();
            var assignedMenuList = _unitofwork.HomeRepo.GetMenusByUserId(userId);
            ViewBag.assignedMenuList = assignedMenuList;
            ViewBag.menuList = menuList;


            return PartialView("_menuListByUserId");
        }


        [HttpPost]
        public JsonResult AssignUserMenus(UserMenuModel model)
        {
            if (model.IsNotBlank())
            {
                _unitofwork.HomeRepo.AddUpdateUserMenus(model);
                return Json(new { success = true, message = "Assigned successfully !!" }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { success = false, message = "some error occured !!" }, JsonRequestBehavior.AllowGet);
        }

        #endregion

        public ActionResult MessageList()
        {


            var messages = new List<Messages>();
            using (var connection = new SqlConnection(_connString))
            {
                connection.Open();
                using (var command = new SqlCommand(@"SELECT [MessageID], [Message], [EmptyMessage], [Date] FROM [dbo].[Messages]", connection))
                {
                    command.Notification = null;

                    var dependency = new SqlDependency(command);
                    dependency.OnChange += new OnChangeEventHandler(dependency_OnChange);

                    if (connection.State == ConnectionState.Closed)
                        connection.Open();


                    var reader = command.ExecuteReader();

                    while (reader.Read())
                    {
                        messages.Add(item: new Messages { MessageID = (int)reader["MessageID"], Message = (string)reader["Message"], EmptyMessage = reader["EmptyMessage"] != DBNull.Value ? (string)reader["EmptyMessage"] : "", MessageDate = Convert.ToDateTime(reader["Date"]) });
                    }
                }

            }

            return View(messages);




        }

        private void dependency_OnChange(object sender, SqlNotificationEventArgs e)
        {
            if (e.Type == SqlNotificationType.Change)
            {
                MessagesHub.SendMessages();
            }
        }



        public async Task<ActionResult> Employee()
        {
            var collection = db.Employee;
            ViewBag.NotifierEntity = db.GetNotifierEntity<Employee>(collection).ToJson();
            return View(await collection.ToListAsync());
        }

        public async Task<ActionResult> EmployeePartial()
        {
            var collection = db.Employee;
            ViewBag.NotifierEntity = db.GetNotifierEntity<Employee>(collection).ToJson();
            return PartialView(await collection.ToListAsync());
        }



        [HttpGet]
        public FileContentResult ExportToExcelOOXML()
        {
            var data = db.Employee.ToList();
            string[] columns = { "Name", "Project", "Developer" };
            byte[] filecontent = ExcelExportHelper.ExportExcel(data, "Technology", true, columns);
            return File(filecontent, ExcelExportHelper.ExcelContentType, "Technologies.xlsx");
        }


        public void ExportToExcel()
        {
            var gv = new GridView();
            gv.DataSource = db.Employee.ToList();
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=DemoExcel.xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter objStringWriter = new StringWriter();
            HtmlTextWriter objHtmlTextWriter = new HtmlTextWriter(objStringWriter);
            gv.RenderControl(objHtmlTextWriter);
            Response.Output.Write(objStringWriter.ToString());
            Response.Flush();
            Response.End();

        }


    }
}