using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Script.Serialization;
using Newtonsoft.Json;

/// <summary>
/// Summary description for IPLocation
/// </summary>
public class IPLocation
{
    public string IPAddress { get; set; }
    public string CountryName { get; set; }
    public string CountryCode { get; set; }
    public string CityName { get; set; }
    public string RegionName { get; set; }
    public string ZipCode { get; set; }
    public string Latitude { get; set; }
    public string Longitude { get; set; }
    public string TimeZone { get; set; }
    public static IPLocation GetIpLocation(string ipAddress = null)
    {
        if (ipAddress.IsBlank())
            ipAddress = GetIpAddress();

        string APIKey = "2138efcefd5a3eac448eec548e86043e8017efe64896074de7162595661a7c5e";

        string url = string.Format("http://api.ipinfodb.com/v3/ip-city/?key={0}&ip={1}&format=json", APIKey, ipAddress);
        using (WebClient client = new WebClient())
        {
            string json = client.DownloadString(url);
            IPLocation location = new JavaScriptSerializer().Deserialize<IPLocation>(json);
            List<IPLocation> locations = new List<IPLocation>();
            locations.Add(location);

            return locations.FirstOrDefault();
        }
    }

    public static string GetIpAddress()
    {
        string ipAddress = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
        if (string.IsNullOrEmpty(ipAddress))
        {
            ipAddress = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
        }
        if (AppConfiguration.Website_Mode_IsLocal)
        {
            ipAddress = "120.59.108.79";
        }

        return ipAddress;
    }

    public static string GetIpDetailsAsString()
    {
        var ip = GetIpLocation();
        return JsonConvert.SerializeObject(ip);
    }
}