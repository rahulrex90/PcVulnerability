using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public static class ExtensionMethods
{
    #region Enum
    
    public enum EnumImgFormat
    {
        Jpg,
        Png,
        Gif
    }
    
    public enum EnumImgMode
    {
        None,
        Max,
        Pad,
        Crop,
        Carve,
        Stretch
    }
    
    public enum EnumImgAnchor
    {
        None,
        Topleft,
        Topcenter,
        Topright,
        Middleleft,
        Middlecenter,
        Middleright,
        Bottomleft,
        Bottomcenter,
        Bottomright
    }
    
    public enum EnumUrl
    {
        Url,
        Query,
        UrlAndQuery,
        Host,
        CompleteUrl,
        UrlArray
    }
    
    #endregion


    #region Custom

    public static string FormatVehicleName(this object value)
    {
        string str = Convert.ToString(value);

        if (str.IsBlank())
            return string.Empty;

        str = str.Replace("NEW", "");


        return str;
    }

    #endregion

    #region Enum Methods

    /// <summary>
    /// this function will convert string into enum. use if like var imageFormat = Functions.StringToEnum<Functions.EnumImgFormat>("gif"); If not found it will return default enum (first one)
    /// </summary>
    public static T StringToEnum<T>(this string str, bool returnDefaultIfNull = true, bool ignoreCase = true) where T : struct
    {
        try
        {
            T res = (T)Enum.Parse(typeof(T), str, ignoreCase);
            
            if (!Enum.IsDefined(typeof(T), res) && returnDefaultIfNull == true)
                return default(T);
            
            return res;
        }
        catch
        {
            return default(T);
        }
    }
    
    /// <summary>
    /// this function will convert int value into enum
    /// </summary>
    public static T IntToEnum<T>(this int number, bool returnDefaultIfNull = true) where T : struct
    {
        try
        {
            T res = (T)Enum.ToObject(typeof(T), number);
            
            if (!Enum.IsDefined(typeof(T), res) && returnDefaultIfNull == true)
                return default(T);
            
            return res;
        }
        catch
        {
            return default(T);
        }
    }
    
    public static T ByteToEnum<T>(this byte number, bool returnDefaultIfNull = true) where T : struct
    {
        try
        {
            T res = (T)Enum.ToObject(typeof(T), number);
            
            if (!Enum.IsDefined(typeof(T), res) && returnDefaultIfNull == true)
                return default(T);
            
            return res;
        }
        catch
        {
            return default(T);
        }
    }
    
    /// <summary>
    /// this function will convert int value into enum string
    /// </summary>
    public static string IntToEnumString<T>(this int enumVal) where T : struct
    {
        if (Enum.IsDefined(typeof(T), enumVal))
        {
            return Enum.ToObject(typeof(T), enumVal).ToString();
        }
        else
        {
            return null;
        }
    }
    
    /// <summary>
    /// this function will convert enum into int value
    /// </summary>
    public static int EnumToInt<T>(this T value) where T : struct
    {
        return (int)(ValueType)value;
    }
    
    /// <summary>
    /// this function will convert enum into string
    /// </summary>
    public static string EnumToString<T>(this T value) where T : struct
    {
        return value.ToString();
    }
    
    public static string EnumToDisplayName(this Enum e)
    {
        var upperCamelCaseRegex = new Regex(@"(?<!^)((?<!\d)\d|(?(?<=[A-Z])[A-Z](?=[a-z])|[A-Z]))", RegexOptions.Compiled);
        return upperCamelCaseRegex.Replace(e.ToString(), " $1");
    }
    
    private static TAttribute GetEnumAttribute<TAttribute>(this Enum value)
        where TAttribute : Attribute
    {
        var type = value.GetType();
        var name = Enum.GetName(type, value);
        return type.GetField(name)
                   .GetCustomAttributes(false)
                   .OfType<TAttribute>()
                   .SingleOrDefault();
    }
    
    // var value = MyEnum.Name1; value.GetEnumAttributeDescription();
    public static String GetEnumAttributeDescription(this Enum value)
    {
        var description = GetEnumAttribute<DescriptionAttribute>(value);
        return description != null ? description.Description : null;
    }
    
    /// <summary>
    /// Get Enum By Enum Description Value e.g ExtensionMethods.GetEnumByAttributeDesctiption<AppCode.User.EnumUserType>(enumDesValue);
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="description"></param>
    /// <returns></returns>
    public static T GetEnumByAttributeDesctiption<T>(string description)
    {
        var type = typeof(T);
        if (!type.IsEnum)
            throw new InvalidOperationException();
        foreach (var field in type.GetFields())
        {
            var attribute = Attribute.GetCustomAttribute(field,
                typeof(DescriptionAttribute)) as DescriptionAttribute;
            if (attribute != null)
            {
                if (attribute.Description == description)
                    return (T)field.GetValue(null);
            }
            else
            {
                if (field.Name == description)
                    return (T)field.GetValue(null);
            }
        }
        throw new ArgumentException("Not found.", "description");
        // or return default(T);
    }
    
    #endregion
    
    #region Ensure Methods
    
    /// <summary>
    /// 1A2B3 will return 123
    /// </summary>
    public static string EnsureNumericOnly(this object value)
    {
        string str = Convert.ToString(value);
        
        if (str.IsBlank())
            return string.Empty;
        
        var result = new StringBuilder();
        foreach (char c in str)
        {
            if (Char.IsDigit(c))
                result.Append(c);
        }
        return result.ToString();
    }
    
    public static string EnsureMaximumLength(this object value, int maxLength, string postFix = null)
    {
        string str = Convert.ToString(value).Trim();
        
        if (str.IsBlank())
            return str;
        
        if (str.Length > maxLength)
            return str.Substring(0, maxLength) + postFix;
        else
            return str;
    }
    
    public static string EnsureNotNull(this object value)
    {
        string str = Convert.ToString(value);
        
        if (str == null)
            return string.Empty;
        
        return str;
    }
    
    #endregion
    
    #region TryParse - Methods
    
    public static T To<T>(this IConvertible value)
    {
        try
        {
            Type t = typeof(T);
            Type u = Nullable.GetUnderlyingType(t);
            
            if (u != null)
            {
                if (value == null || value.Equals(""))
                    return default(T);
                
                return (T)Convert.ChangeType(value, u);
            }
            else
            {
                if (value == null || value.Equals(""))
                    return default(T);
                
                return (T)Convert.ChangeType(value, t);
            }
        }
        catch
        {
            return default(T);
        }
    }
    
    public static T To<T>(this IConvertible value, IConvertible ifError)
    {
        try
        {
            Type t = typeof(T);
            Type u = Nullable.GetUnderlyingType(t);
            
            if (u != null)
            {
                if (value == null || value.Equals(""))
                    return (T)ifError;
                
                return (T)Convert.ChangeType(value, u);
            }
            else
            {
                if (value == null || value.Equals(""))
                    return (T)(ifError.To<T>());
                
                return (T)Convert.ChangeType(value, t);
            }
        }
        catch
        {
            return (T)ifError;
        }
    }
    
    /// <summary>
    ///  Will return NULL
    /// cab be used as :   List<int?> StateIDs = qsStateIDs.Split(',').Select(s => ExtensionMethods.TryParseInt(s)).ToList();   
    /// </summary> 
    public static int? TryParseInt(this object value, int? ifNullReturnThis = null)
    {
        int i;
        string str = Convert.ToString(value);
        if (Int32.TryParse(str, out i))
            return i;
        return ifNullReturnThis;
    }
    
    public static int TryParseIntNotNullable(this object value, int ifNullReturnThis = 0)
    {
        var nullableNumber = value.TryParseInt();
        var returnNumber = nullableNumber ?? ifNullReturnThis;
        return returnNumber;
    }
    
    public static short? TryParseShort(this object value, short? ifNullReturnThis = null)
    {
        short i;
        string str = Convert.ToString(value);
        if (short.TryParse(str, out i))
            return i;
        return ifNullReturnThis;
    }
    
    public static short TryParseShortNotNullable(this object value, short ifNullReturnThis = 0)
    {
        var nullableNumber = value.TryParseShort();
        var returnNumber = nullableNumber ?? ifNullReturnThis;
        return returnNumber;
    }
    
    public static byte? TryParseByte(this object value, byte? ifNullReturnThis = null)
    {
        byte i;
        string str = Convert.ToString(value);
        if (byte.TryParse(str, out i))
            return i;
        return ifNullReturnThis;
    }
    
    public static byte TryParseByteNotNullable(this object value, byte ifNullReturnThis = 0)
    {
        var nullableNumber = value.TryParseByte();
        var returnNumber = nullableNumber ?? ifNullReturnThis;
        return returnNumber;
    }
    
    public static decimal? TryParseDecimal(this object value, decimal? ifNullReturnThis = null)
    {
        decimal i;
        string str = Convert.ToString(value);
        if (decimal.TryParse(str, out i))
            return i;
        return ifNullReturnThis;
    }
    
    public static decimal TryParseDecimalNotNullable(this object value, decimal ifNullReturnThis = 0)
    {
        var nullableNumber = value.TryParseDecimal();
        var returnNumber = nullableNumber ?? ifNullReturnThis;
        return returnNumber;
    }
    
    public static double? TryParseDouble(this object value, double? ifNullReturnThis = null)
    {
        double i;
        string str = Convert.ToString(value);
        if (double.TryParse(str, out i))
            return i;
        return ifNullReturnThis;
    }
    
    public static double TryParseDoubleNotNullable(this object value, double ifNullReturnThis = 0)
    {
        var nullableNumber = value.TryParseDouble();
        var returnNumber = nullableNumber ?? ifNullReturnThis;
        return returnNumber;
    }
    
    public static bool TryParseCheckBox(this string value)
    {
        if (value.ToLower() == "true" || value.ToLower() == "yes")
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public static bool TryParseBool(this object value)
    {
        string resultStr = Convert.ToString(value).Trim().ToUpper();
        return (resultStr == "YES" || resultStr == "Y" || resultStr == "TRUE" || resultStr == "1");
    }
    
    public static DateTime? TryParseDateTime(this object value)
    {
        if (!value.IsDate())
            return null;
        
        if (value.IsBlank())
            return null;
        
        string str = Convert.ToString(value);
        str = str.Replace("-", "/");
        
        return Convert.ToDateTime(str);
    }
    
    public static string TryParseQueryStringFromStringUrl(this string strUrl, string parameterName)
    {
        if (strUrl.IsBlank())
            return null;
        
        Uri myUri = new Uri(strUrl);
        return HttpUtility.ParseQueryString(myUri.Query).Get(parameterName);
    }
    
    public static List<T> DeSerializeStringToList<T>(this string stringList, char separator = ';')
    {
        return stringList.Split(separator).Select(s => ExtensionMethods.To<T>(s)).ToList();
    }
    
    #endregion
    
    #region String
    
    public static string FormatBR(this object value)
    {
        string str = Convert.ToString(value);
        
        if (str.IsBlank())
            return string.Empty;
        
        return str.Replace("\n", "<br/>");
    }
    
    /// <summary>
    /// Formats the string according to the specified mask
    /// </summary>
    /// <param name="input">The input string.</param>
    /// <param name="mask">The mask for formatting. Like "A##-##-T-###Z"</param>
    /// <returns>The formatted string</returns>
    public static string FormatWithMask(this string input, string mask)
    {
        if (input.IsBlank())
            return input;
        
        var output = string.Empty;
        var index = 0;
        foreach (var m in mask)
        {
            if (m == '#')
            {
                if (index < input.Length)
                {
                    output += input[index];
                    index++;
                }
            }
            else
                output += m;
        }
        return output;
    }
    
    public static string FormatUploadFileName(this object fileName, bool includeDateTimeStamp = true)
    {
        string returnFileName = null;
        string str = Convert.ToString(fileName);
        
        string extension = Path.GetExtension(str);
        string filename = Path.GetFileName(str);
        string filenameNoExtension = Path.GetFileNameWithoutExtension(str);
        
        returnFileName = filenameNoExtension.ToSlug();
        if (includeDateTimeStamp == true)
            returnFileName = DateTimeStamp() + "-" + returnFileName;
        
        return string.Format("{0}{1}", returnFileName, extension);
    }
    
    private static string FormatInputFieldData(this string rawValue, int? maxLength = null)
    {
        var value = rawValue == null ? "" : rawValue.Trim();
        
        if (value.IsBlank())
            return null;
        
        if (maxLength != null)
            value = value.EnsureMaximumLength((int)maxLength);
        
        return value;
    }
    
    public static string FormatExcelFieldData(this string value, int maxLength)
    {
        string str = Convert.ToString(value).TrimData();
        
        if (str.IsNotBlank())
        {
            str = str.Replace("&#160;", " ");
            str = str.EnsureMaximumLength(maxLength);
        }
        else
        {
            str = null;
        }
        
        return str;
    }
    
    public static string TrimData(this string value, int? maxLength = null)
    {
        return FormatInputFieldData(value, maxLength);
    }
    
    public static string Truncate(this string text, int maxLength, string suffix = "...")
    {
        string truncatedString = text.Trim();
        
        if (maxLength <= 0)
            return truncatedString;
        int strLength = maxLength;
        
        if (strLength <= 0)
            return truncatedString;
        
        if (text == null || text.Length <= maxLength)
            return truncatedString;
        
        truncatedString = text.Substring(0, strLength);
        truncatedString = truncatedString.TrimEnd();
        truncatedString += suffix;
        
        return truncatedString;
    }
    
    public static string TrimNoOfCharFromString(this object value, int noChrRemove)
    {
        string str = Convert.ToString(value);
        int strLength = str.Length;
        
        if (str.IsBlank())
            return str;
        
        if (strLength > noChrRemove)
        {
            int requiredLength = strLength - noChrRemove;
            return str.Substring(0, requiredLength);
        }
        else
        {
            return str;
        }
    }
    
    /// <summary>
    ///  "  I'm    wearing the   cheese.  It isn't wearing me!   "  wiil be "I'm wearing the cheese. It isn't wearing me!"
    /// </summary> 
    public static string TrimAndReduce(this object str)
    {
        return str.ConvertWhitespacesToSingleSpaces().Trim();
    }
    
    public static string ConvertWhitespacesToSingleSpaces(this object value)
    {
        string str = Convert.ToString(value);
        return Regex.Replace(str, @"\s+", " ");
    }
    
    public static string RemoveEverySpace(this object value)
    {
        string str = Convert.ToString(value);
        return Regex.Replace(str, @"\s+", "");
    }
    
    public static string UnDasherize(this object value)
    {
        return value.ToString().Replace("-", "");
    }
    
    public static string ReplaceString(this object value, string oldValue, string newValue)
    {
        var strValue = Convert.ToString(value);
        
        if (strValue.IsBlank())
            return null;
        
        if (!strValue.Contains(oldValue))
            return strValue;
        
        return strValue.Replace(oldValue, newValue);
    }
    
    public static String ToUrl(this object value)
    {
        return Convert.ToString(value).ToSlug();
    }
    
    //Generate slugs for friendly urls. 
    public static String ToSlug(this string text, string seperator = "-")
    {
        String value = text.Normalize(NormalizationForm.FormD).Trim();
        StringBuilder builder = new StringBuilder();
        
        foreach (char c in text.ToCharArray())
            if (CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark)
                builder.Append(c);
        
        value = builder.ToString();
        
        byte[] bytes = Encoding.GetEncoding("Cyrillic").GetBytes(text);
        
        value = Regex.Replace(Regex.Replace(Encoding.ASCII.GetString(bytes), @"\s{2,}|[^\w]", " ", RegexOptions.ECMAScript).Trim(), @"\s+", seperator);
        
        return value.ToLowerInvariant();
    }
    
    /// <summary>
    /// This method takes a string with html tags and return string without html tags. Will convert '<p>Testing</p>' to 'Testing' 
    /// </summary>
    public static string RemoveHtmlTags(this object value)
    {
        string str = Convert.ToString(value);
        string noHtml = Regex.Replace(str, @"<[^>]+>|&nbsp;", "").Trim();
        return Regex.Replace(noHtml, @"\s{2,}", " ");
    }
    
    public static string RemoveIllegalCharForXml(this object value)
    {
        string str = Convert.ToString(value);
        
        str = str.Replace("&", "&amp;");
        str = str.Replace("\"", "&quot;");
        str = str.Replace("'", "&apos;");
        str = str.Replace("<", "&lt;");
        str = str.Replace(">", "&gt;");
        
        return str;
    }
    
    public static string RemoveAllSpecialCharacters(this object value)
    {
        string str = Convert.ToString(value);
        
        StringBuilder stringBuilder = new StringBuilder();
        foreach (char chr in str.Where<char>((char c) =>
        {
            if (c >= '0' && c <= '9' || c >= 'A' && c <= 'Z')
            {
                return true;
            }
            if (c < 'a')
            {
                return false;
            }
            return c <= 'z';
        }))
        {
            stringBuilder.Append(chr);
        }
        return stringBuilder.ToString();
    }
    
    /// <summary>
    /// If you want to start string with any char.
    /// </summary>
    /// <param name="value">String</param>
    /// <param name="startWith">Start char E.g '/' ';' ','</param>
    /// <returns></returns>
    public static string AlwaysStartStringWithChar(this object value, char startWith)
    {
        string str = Convert.ToString(value).TrimData();
        
        if (str.IsBlank())
            return str;
        
        if (str.StartsWith(startWith.ToString()))
            return str;
        
        return string.Format("{0}{1}", startWith, str);
    }
    
    /// <summary>
    /// If you want to end string with any char.
    /// </summary>
    /// <param name="value">String</param>
    /// <param name="endWith">End char E.g ';' ','</param>
    /// <returns></returns>
    public static string AlwaysEndStringWithChar(this object value, char endWith)
    {
        string str = Convert.ToString(value).TrimData();
        
        if (str.IsBlank())
            return str;
        
        int strLength = str.Length;
        var lastChar = str[strLength - 1];
        
        if (lastChar == endWith)
            return str;
        
        return str + endWith.ToString();
    }
    
    /// <summary>
    /// Splits the string by pascal case.
    /// </summary>
    /// <param name="text">ThisIsAPascalCaseString</param>
    /// <returns>This Is A Pascal Case String</returns>
    public static string SplitPascalCase(this string text)
    {
        if (string.IsNullOrEmpty(text))
        {
            return text;
        }
        return Regex.Replace(text, "([A-Z])", " $1", RegexOptions.Compiled).Trim();
    }
    
    public static string GetStrBetweenTags(this string content, string tag, string tagWrapper = "<")
    {
        var tagWrapperStart = tagWrapper == "<" ? "<" : "[";
        var tagWrapperEnd = tagWrapper == "<" ? ">" : "]";
        
        var startTag = string.Format("{0}{1}{2}", tagWrapperStart, tag, tagWrapperEnd);
        var endTag = string.Format("{0}/{1}{2}", tagWrapperStart, tag, tagWrapperEnd);
        
        if (content.Contains(startTag) && content.Contains(endTag))
        {
            int startIndex = content.IndexOf(startTag) + startTag.Length;
            int endIndex = content.IndexOf(endTag);
            
            return content.Substring(startIndex, endIndex - startIndex);
        }
        else
            return null;
    }
    
    public static string GetLastChar(this string source, int tailLength)
    {
        if (tailLength >= source.Length)
            return source;
        return source.Substring(source.Length - tailLength);
    }
    
    public static string UppercaseFirstLetter(this object value)
    {
        string str = Convert.ToString(value);
        if (str.Length > 0)
        {
            char[] array = str.ToCharArray();
            array[0] = char.ToUpper(array[0]);
            return new string(array);
        }
        return str;
    }
    
    public static string ToPlural(this string singular)
    {
        int num = singular.LastIndexOf(" of ");
        if (num > 0)
        {
            return string.Concat(singular.Substring(0, num), singular.Remove(0, num).ToPlural());
        }
        if (singular.EndsWith("sh"))
        {
            return string.Concat(singular, "es");
        }
        if (singular.EndsWith("ch"))
        {
            return string.Concat(singular, "es");
        }
        if (singular.EndsWith("us"))
        {
            return string.Concat(singular, "es");
        }
        if (singular.EndsWith("ss"))
        {
            return string.Concat(singular, "es");
        }
        if (singular.EndsWith("y"))
        {
            return string.Concat(singular.Remove(singular.Length - 1, 1), "ies");
        }
        if (!singular.EndsWith("o"))
        {
            return string.Concat(singular, "s");
        }
        return string.Concat(singular.Remove(singular.Length - 1, 1), "oes");
    }

    public static string GetUntilOrEmpty(this string text, string stopAt)
    {
        if (!String.IsNullOrWhiteSpace(text))
        {
            int charLocation = text.IndexOf(stopAt, StringComparison.Ordinal);

            if (charLocation > 0)
            {
                return text.Substring(0, charLocation);
            }
        }

        return String.Empty;
    }
    /// <summary>
    /// Returns first part of string before any character we pass.
    /// </summary>
    /// <param name="text">ThisIsAPascalCaseString</param>
    /// <returns>This Is A Pascal Case String</returns>
    #endregion

    #region Int - Methods

    public static bool InRange(this int value, int minValue, int maxValue)
    {
        if (value < minValue)
        {
            return false;
        }
        return value <= maxValue;
    }
    
    public static int InRange(this int value, int minValue, int maxValue, int defaultValue)
    {
        if (!value.InRange(minValue, maxValue))
        {
            return defaultValue;
        }
        return value;
    }
    
    public static bool IsEven(this int value)
    {
        return value % 2 == 0;
    }
    
    public static bool IsOdd(this int value)
    {
        return !value.IsEven();
    }
    
    #endregion
    
    #region Misc - Methods
    
    /// <summary>
    /// For a strongly typed list, this would allow you to write:
    /// var strings = new List<string>();
    /// var randomString = strings.PickRandom();
    /// If all you have is an ArrayList, you can cast it:
    /// var strings = myArrayList.Cast<string>();
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="source"></param>
    /// <returns></returns>
    public static T PickRandom<T>(this IEnumerable<T> source)
    {
        return source.PickRandom(1).Single();
    }
    
    public static IEnumerable<T> PickRandom<T>(this IEnumerable<T> source, int count)
    {
        return source.Shuffle().Take(count);
    }
    
    public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source)
    {
        return source.OrderBy(x => Guid.NewGuid());
    }
    
    public static string ResizeImage(this string imgPath, int? maxWidth, int? maxHeight = null, string groupName404 = "default", EnumImgFormat imgFormat = EnumImgFormat.Jpg, int? imgQuality = 80, EnumImgMode imgMode = EnumImgMode.None, EnumImgAnchor imgAnchor = EnumImgAnchor.None)
    {
        imgPath = imgPath.FileNotFound(AppConfiguration.ImageNotAvailable);
        
        List<string> imgAttributes = new List<string>();
        
        if (maxWidth != null)
            imgAttributes.Add(string.Format("maxwidth={0}", maxWidth));
        if (maxHeight != null)
            imgAttributes.Add(string.Format("maxheight={0}", maxHeight));
        if (imgMode != EnumImgMode.None)
            imgAttributes.Add(string.Format("mode={0}", imgMode.ToString().ToLower()));
        if (imgAnchor != EnumImgAnchor.None)
            imgAttributes.Add(string.Format("anchor={0}", imgAnchor.ToString().ToLower()));
        if (groupName404.IsNotBlank())
            imgAttributes.Add(string.Format("404={0}", groupName404));
        
        imgAttributes.Add(string.Format("format={0}", imgFormat.ToString().ToLower()));
        imgAttributes.Add(string.Format("quality={0}", imgQuality));
        
        var imgOptions = string.Join("&", imgAttributes.Where(t => t.Length > 0));
        return string.Format("{0}?{1}", imgPath.FingerprintImage(), imgOptions);
    }
    
    public static string FingerprintImage(this string imgPath)
    {
        if (imgPath.IsBlank() || imgPath.StartsWith("http") || imgPath.StartsWith("data:"))
            return imgPath;
        
        imgPath = imgPath.FileNotFound(AppConfiguration.ImageNotAvailable);
        
        string staticDomain = AppConfiguration.Website_StaticDomain;
        if (AppConfiguration.Website_Mode_IsLocal)
            staticDomain = null;
        
        return string.Format("{0}{1}", staticDomain, Fingerprint.Tag(imgPath));
    }
    
    public static string GetSha256Hash(this string input)
    {
        string rtnHash = "";
        try
        {
            SHA256 hash = SHA256.Create();
            ASCIIEncoding encoder = new ASCIIEncoding();
            byte[] combined = encoder.GetBytes(input);
            hash.ComputeHash(combined);
            rtnHash = Convert.ToBase64String(hash.Hash);
        }
        catch (Exception exp)
        {
            throw new Exception("ERROR: in getSHA1hash " + exp.Message.ToString(), exp);
        }
        return rtnHash;
    }
    
    public static byte[] CompressGZip(this string @this)
    {
        byte[] array;
        byte[] bytes = Encoding.Default.GetBytes(@this);
        using (MemoryStream memoryStream = new MemoryStream())
        {
            using (GZipStream gZipStream = new GZipStream(memoryStream, CompressionMode.Compress))
            {
                gZipStream.Write(bytes, 0, (int)bytes.Length);
                gZipStream.Close();
                array = memoryStream.ToArray();
            }
        }
        return array;
    }
    
    public static byte[] CompressGZip(this string @this, Encoding encoding)
    {
        byte[] array;
        byte[] bytes = encoding.GetBytes(@this);
        using (MemoryStream memoryStream = new MemoryStream())
        {
            using (GZipStream gZipStream = new GZipStream(memoryStream, CompressionMode.Compress))
            {
                gZipStream.Write(bytes, 0, (int)bytes.Length);
                gZipStream.Close();
                array = memoryStream.ToArray();
            }
        }
        return array;
    }
    
    #endregion
    
    #region Web Controls
    
    // Button UpdateButton = Page.FindControl<Button>("UpdateButton");
    public static T FindControl<T>(this Control startingControl, string id) where T : Control
    {
        T foundControl = default(T);
        
        int controlCount = startingControl.Controls.Count;
        
        foreach (Control c in startingControl.Controls)
        {
            if (c is T && string.Equals(id, c.ID,
                StringComparison.InvariantCultureIgnoreCase))
            {
                foundControl = c as T;
                break;
            }
            else
            {
                foundControl = FindControl<T>(c, id);
                if (foundControl != null)
                {
                    break;
                }
            }
        }
        return foundControl;
    }
    
    public static T FindControlByType<T>(this Control ctrl)
    {
        return ctrl.GetChildren().OfType<T>().SingleOrDefault();
    }
    
    public static List<T> FindControlsByType<T>(this Control ctrl)
    {
        return ctrl.GetChildren().OfType<T>().ToList();
    }
    
    public static IEnumerable<Control> GetChildren(this Control control)
    {
        var children = control.Controls.Cast<Control>();
        return children.SelectMany(GetChildren).Concat(children);
    }
    
    //public static void EnableDisableAllControls(this Control parent, bool state)
    //{
    //    foreach (Control c in parent.Controls)
    //    {
    //        // Get the Enabled property by reflection.
    //        Type type = c.GetType();
    //        PropertyInfo prop = type.GetProperty("Enabled");
            
    //        // Set it to False to disable the control.
    //        if (type != typeof(Telerik.Web.UI.RadAjaxManager))
    //        {
    //            if (prop != null)
    //            {
    //                prop.SetValue(c, state, null);
    //            }
    //        }
            
    //        // Recurse into child controls.
    //        if (c.Controls.Count > 0)
    //        {
    //            c.EnableDisableAllControls(state);
    //        }
    //    }
    //}
    
    public static void AddCssClass(this WebControl control, string cssClass)
    {
        control.CssClass += " " + cssClass;
    }
    
    public static void RemoveCssClass(this WebControl control, string cssClass)
    {
        var classes = from c in control.CssClass.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)
                      where !c.Equals(cssClass, StringComparison.OrdinalIgnoreCase)
                      select c;
        
        control.CssClass = String.Join(" ", classes);
    }
    
    #endregion
    
    #region Bool - Methods
    
    public static bool IsBlank(this object value)
    {
        string str = Convert.ToString(value);
        if (str == "null")
            str = "";
        
        return String.IsNullOrEmpty(str) ? true : false;
    }
    
    public static string IsBlank(this object value, object defaultValue)
    {
        var returnValue = string.Empty;
        
        if (value.IsBlank())
        {
            returnValue = Convert.ToString(defaultValue);
        }
        else
        {
            returnValue = Convert.ToString(value);
        }
        
        return returnValue;
    }
    
    public static string IsBlank(this object value, bool returnNull)
    {
        var returnValue = string.Empty;
        
        if (value.IsBlank())
        {
            returnValue = null;
        }
        else
        {
            returnValue = Convert.ToString(value);
        }
        
        return returnValue;
    }
    
    public static bool IsNotBlank(this object value)
    {
        return value.IsBlank() ? false : true;
    }
    
    public static bool IsNumeric(this object value)
    {
        int number;
        string str = Convert.ToString(value);
        value = str.Replace(".", "0");
        
        return Int32.TryParse(str, out number) ? true : false;
    }
    
    public static bool IsNotNumeric(this object value)
    {
        return value.IsNumeric() ? false : true;
    }
    
    public static bool IsDecimal(this object value)
    {
        decimal number;
        string str = Convert.ToString(value);
        return Decimal.TryParse(str, out number) ? true : false;
    }
    
    public static bool IsNotDecimal(this object value)
    {
        return value.IsDecimal() ? false : true;
    }
    
    public static bool IsDate(this object value)
    {
        string str = Convert.ToString(value);
        
        if (str.IsBlank())
        {
            return false;
        }
        else
        {
            DateTime dummyDate;
            try
            {
                dummyDate = DateTime.Parse(str);
            }
            catch
            {
                return false;
            }
            return true;
        }
    }
    
    public static bool IsNotDate(this object value)
    {
        return value.IsDate() ? false : true;
    }
    
    public static bool IsValidaDate(this object value)
    {
        bool returnValue = true;
        
        if (value.IsBlank())
            return false;
        
        DateTime valueDate = Convert.ToDateTime(value);
        List<string> blackListYears = new List<string>();
        blackListYears.Add("1");
        blackListYears.Add("1900");
        
        if (blackListYears.Contains(valueDate.Year.ToString()))
            returnValue = false;
        
        return returnValue;
    }
    
    public static bool FileFound(this string file)
    {
        return File.Exists(HttpContext.Current.Server.MapPath(file)) ? true : false;
    }
    
    public static bool FileNotFound(this string file)
    {
        return file.FileFound() ? false : true;
    }
    
    public static string FileNotFound(this string file, object ifNotFoundReturnThis)
    {
        var returnValue = string.Empty;
        
        if (file.FileNotFound())
        {
            returnValue = Convert.ToString(ifNotFoundReturnThis);
        }
        else
        {
            returnValue = Convert.ToString(file);
        }
        
        return returnValue;
    }
    
    public static bool IsValidEmail(this object email)
    {
        bool result = false;
        var strEmail = Convert.ToString(email.TrimAndReduce());
        
        if (strEmail.IsBlank())
            return result;
        
        result = Regex.IsMatch(strEmail, @"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$");
        return result;
    }
    
    /// <returns>
    /// This method will return Result (bool) + Error Message
    /// </returns>
    /// <param name="fileType">Image / Document </param>
    public static Tuple<bool, string> IsValidFileExt(this string fileName, string fileType)
    {
        var errorMessage = string.Empty;
        fileName = fileName.ToLower();
        fileType = fileType.ToLower();
        
        //create an array of valid file extensions
        string[] validExt = { "jpg" };
        switch (fileType)
        {
            case "image":
                validExt = new string[5]
                {
                    "jpg",
                    "jpeg",
                    "png",
                    "gif",
                    "bmp"
                };
                errorMessage = "Please select a valid image  e.g. jpg, jpeg, png, gif, bmp";
                break;
            case "document":
                validExt = new string[6]
                {
                    "xls",
                    "xlsx",
                    "doc",
                    "docx",
                    "pdf",
                    "zip"
                };
                errorMessage = "Please select a valid document e.g. xls, xlsx, doc, docx, pdf, zip";
                break;
        }
        
        var returnValue = new Tuple<bool, string>(false, errorMessage);
        
        if (fileName.IsNotBlank())
        {
            //get file extension
            string fileExt = fileName.Substring(fileName.LastIndexOf('.') + 1).ToLower();
            //check if current extensions matches any valid extensions
            for (int i = 0; i < validExt.Length; i++)
            {
                if (fileExt == validExt[i])
                {
                    returnValue = new Tuple<bool, string>(true, string.Empty);
                    break;
                }
            }
        }
        
        return returnValue;
    }
    
    #endregion
    
    #region DateTime - Methods
    
    public static string DateTimeStamp()
    {
        string returnvalue = DateTime.Now.ToString("yyyyMMddHHmmssffff");
        return returnvalue;
    }
    
    public static string GetDateOnly(this string dateValue)
    {
        return System.DateTime.Parse(dateValue).ToString("ddd, MMM d, yyyy");
    }
    
    public static string GetTimeOnly(this string dateValue)
    {
        return System.DateTime.Parse(dateValue).ToString("hh:mm");
    }
    
    #endregion
    
    #region Query String
    
    public static HttpRequest GetPageHttpRequest()
    {
        return HttpContext.Current.Request;
    }

    public static string QueryString(this string parameterName)
    {
        string result = string.Empty;
        
        if (HttpContext.Current != null && HttpContext.Current.Request.QueryString[parameterName] != null)
            result = HttpContext.Current.Request.QueryString[parameterName].ToString();
        return result;
    }
    
    public static string QueryString(this string parameterName, object ifNullReturnThis)
    {
        return QueryString(parameterName).IsBlank(ifNullReturnThis);
    }
    
    public static bool QueryStringBool(this string parameterName)
    {
        string resultStr = QueryString(parameterName);
        if (resultStr.IsBlank())
            return false;
        
        return (resultStr.ToUpper() == "YES" || resultStr.ToUpper() == "TRUE" || resultStr.ToUpper() == "1");
    }
    
    public static int? QueryStringInt(this string parameterName, int? ifNullReturnThis = null)
    {
        return QueryString(parameterName).TryParseInt(ifNullReturnThis);
    }
    
    public static int QueryStringIntNotNullable(this string parameterName, int ifNullReturnThis = 0)
    {
        return QueryString(parameterName).TryParseIntNotNullable(ifNullReturnThis);
    }
    
    public static decimal? QueryStringDecimal(this string parameterName, decimal? ifNullReturnThis = null)
    {
        return QueryString(parameterName).TryParseDecimal(ifNullReturnThis);
    }
    
    public static decimal QueryStringDecimalNotNullable(this string parameterName, decimal ifNullReturnThis = 0)
    {
        return QueryString(parameterName).TryParseDecimalNotNullable(ifNullReturnThis);
    }
    
    public static short? QueryStringShort(this string parameterName, short? ifNullReturnThis = null)
    {
        return QueryString(parameterName).TryParseShort(ifNullReturnThis);
    }
    
    public static short QueryStringShortNotNullable(this string parameterName, short ifNullReturnThis = 0)
    {
        return QueryString(parameterName).TryParseShortNotNullable(ifNullReturnThis);
    }
    
    public static byte? QueryStringByte(this string parameterName, byte? ifNullReturnThis = null)
    {
        return QueryString(parameterName).TryParseByte(ifNullReturnThis);
    }
    
    public static byte QueryStringByteNotNullable(this string parameterName, byte ifNullReturnThis = 0)
    {
        return QueryString(parameterName).TryParseByteNotNullable(ifNullReturnThis);
    }
    
    #endregion


    private static Page page
    {
        get
        {
            return HttpContext.Current.Handler as Page;
        }
    }

    public static string RouterValue(this string parameterName)
    {
        string result = null;

        result = Convert.ToString(HttpContext.Current.Request.RequestContext.RouteData.Values[parameterName]);
        return result;
    }
    //#region Router Values
    
    //private static Page page
    //{
    //    get
    //    {
    //        return HttpContext.Current.Handler as Page;
    //    }
    //}
    
    //public static string RouterValue(this string parameterName)
    //{
    //    string result = null;
        
    //    result = Convert.ToString(page.RouteData.Values[parameterName]);
    //    return result;
    //}
    
    //public static string RouterValue(this string parameterName, object ifNullReturnThis)
    //{
    //    return RouterValue(parameterName).IsBlank(ifNullReturnThis);
    //}
    
    //public static int? RouterValueInt(this string parameterName, int? ifNullReturnThis = null)
    //{
    //    return RouterValue(parameterName).TryParseInt(ifNullReturnThis);
    //}
    
    //public static int RouterValueIntNotNullable(this string parameterName, int ifNullReturnThis = 0)
    //{
    //    return RouterValue(parameterName).TryParseIntNotNullable(ifNullReturnThis);
    //}
    
    //#endregion
    
    #region Page
    
    //public static object GetUrl(EnumUrl requiredInfo)
    //{
    //    object url = "";
    //    if (page == null)
    //        return null;
        
    //    // e.g url: http://kuldeep-pc.x10corp.com/app/dashboard?action=logout
    //    switch (requiredInfo)
    //    {
    //        case EnumUrl.Url:
    //            // return: /app/dashboard
    //            url = page.Request.Url.AbsolutePath;
    //            break;
    //        case EnumUrl.Query:
    //            // return: ?action=logout
    //            url = page.Request.Url.Query;
    //            break;
    //        case EnumUrl.UrlAndQuery:
    //            // return: /app/dashboard?action=logout
    //            url = page.Request.Url.PathAndQuery;
    //            break;
    //        case EnumUrl.Host:
    //            // return: kuldeep-pc.x10corp.com
    //            url = page.Request.Url.Host;
    //            break;
    //        case EnumUrl.CompleteUrl:
    //            // return: http://kuldeep-pc.x10corp.com/app/dashboard?action=logout
    //            url = page.Request.Url.AbsoluteUri;
    //            break;
    //        case EnumUrl.UrlArray:
    //            url = page.Request.Url.Segments;
    //            break;
    //    }
        
    //    return url;
    //}
    
    public static string GetThisPageUrl(bool includeQueryString)
    {
        string url = string.Empty;
        if (HttpContext.Current == null)
            return url;
        
        if (includeQueryString)
        {
            string storeHost = "http://" + ServerVariables("HTTP_HOST");
            if (storeHost.EndsWith("/"))
                storeHost = storeHost.Substring(0, storeHost.Length - 1);
            url = storeHost + HttpContext.Current.Request.RawUrl;
        }
        else
        {
            url = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Path);
        }
        url = url.ToLowerInvariant();
        return url;
    }
    
    public static string ServerVariables(this string name)
    {
        string tmpS = string.Empty;
        try
        {
            if (HttpContext.Current.Request.ServerVariables[name] != null)
            {
                tmpS = HttpContext.Current.Request.ServerVariables[name].ToString();
            }
        }
        catch
        {
            tmpS = string.Empty;
        }
        return tmpS;
    }
    
    public static Control GetPostBackControl(this Page page)
    {
        Control postbackControlInstance = null;
        
        string postbackControlName = page.Request.Params.Get("__EVENTTARGET");
        
        if (postbackControlName != null && postbackControlName != string.Empty)
        {
            postbackControlInstance = page.FindControl(postbackControlName);
        }
        else
        {
            // handle the Button control postbacks
            for (int i = 0; i < page.Request.Form.Keys.Count; i++)
            {
                postbackControlInstance = page.FindControl(page.Request.Form.Keys[i]);
                
                if (postbackControlInstance is System.Web.UI.WebControls.Button)
                {
                    return postbackControlInstance;
                }
            }
        }
        
        // handle the ImageButton postbacks
        if (postbackControlInstance == null)
        {
            for (int i = 0; i < page.Request.Form.Count; i++)
            {
                if ((page.Request.Form.Keys[i].EndsWith(".x")) || (page.Request.Form.Keys[i].EndsWith(".y")))
                {
                    postbackControlInstance = page.FindControl(page.Request.Form.Keys[i].Substring(0, page.Request.Form.Keys[i].Length - 2));
                    
                    return postbackControlInstance;
                }
            }
        }
        
        return postbackControlInstance;
    }
    
    #endregion
    
    #region Action - Methods
    
    public static void DeleteFile(this string value)
    {
        if (value.FileFound())
        {
            File.Delete(HttpContext.Current.Server.MapPath(value));
        }
    }
    
    public static void DeleteFiles(this string directoryName, List<string> files)
    {
        foreach (var file in files)
        {
            if ((directoryName + file).FileFound())
            {
                File.Delete(HttpContext.Current.Server.MapPath(directoryName + file));
            }
        }
    }
    
    public static void DeleteFiles(this List<string> files)
    {
        foreach (var file in files)
        {
            if ((file).FileFound())
            {
                File.Delete(HttpContext.Current.Server.MapPath(file));
            }
        }
    }
    
    public static void DeleteFolder(this string folderName)
    {
        folderName = HttpContext.Current.Server.MapPath(folderName);
        if (Directory.Exists(folderName))
        {
            DirectoryInfo di = new DirectoryInfo(folderName);
            FileInfo[] rgFiles = di.GetFiles();
            foreach (FileInfo fi in rgFiles)
            {
                fi.Delete();
            }
            Directory.Delete(folderName);
        }
    }
    
    private static void ConvertByteArrayToImage(this byte[] byteArrayIn, string path, string imageName)
    {
        System.Drawing.Image newImage;
        string strFileName = HttpContext.Current.Server.MapPath(path) + imageName;
        
        if (byteArrayIn != null)
        {
            using (MemoryStream stream = new MemoryStream(byteArrayIn))
            {
                newImage = System.Drawing.Image.FromStream(stream);
                newImage.Save(strFileName);
            }
        }
    }

    #endregion
}