using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Caching;

/// <summary>
/// Summary description for DataCaching
/// </summary>
public class DataCaching
{
    static readonly ObjectCache Cache = MemoryCache.Default;

    public enum EnumCacheTimeFrame
    {
        AddSeconds,
        AddMinutes,
        AddHours,
        AddDays
    }

    /// <summary>
    /// Retrieve a cached item
    /// </summary>
    /// <typeparam name="T">Type of cached item</typeparam>
    /// <param name="key">Name of cached item</param>
    /// <returns>Cached item as type</returns>
    public static T Get<T>(string key) where T : class
    {
        if (Cache.Contains(key))
        {
            return (T)Cache[key];
        }
        return null;
    }

    /// <summary>
    /// Insert value into the cache using
    /// appropriate name/value pairs
    /// </summary>
    /// <typeparam name="T">Type of cached item</typeparam>
    /// <param name="objectToCache">Item to be cached</param>
    /// <param name="key">Name of item</param>
    /// <param name="cacheTimeFrame">Time Frame</param>
    /// <param name="cacheTime">Time</param>
    public static void Add<T>(T objectToCache, string key, EnumCacheTimeFrame cacheTimeFrame = EnumCacheTimeFrame.AddDays, double cacheTime = 1) where T : class
    {
        var cacheDateTime = DateTime.Now;
        switch (cacheTimeFrame)
        {
            case EnumCacheTimeFrame.AddSeconds:
                cacheDateTime = DateTime.Now.AddSeconds(cacheTime);
                break;
            case EnumCacheTimeFrame.AddMinutes:
                cacheDateTime = DateTime.Now.AddMinutes(cacheTime);
                break;
            case EnumCacheTimeFrame.AddHours:
                cacheDateTime = DateTime.Now.AddHours(cacheTime);
                break;
            case EnumCacheTimeFrame.AddDays:
                cacheDateTime = DateTime.Now.AddDays(cacheTime);
                break;
        }

        Cache.Add(key, objectToCache, cacheDateTime);
    }

    /// <summary>
    /// Remove item from cache
    /// </summary>
    /// <param name="key">Name of cached item</param>
    public static void Clear(string key)
    {
        Cache.Remove(key);
    }

    /// <summary>
    /// Gets all cached items as a list by their key.
    /// </summary>
    /// <returns></returns>
    public static List<string> GetAll()
    {
        return Cache.Select(keyValuePair => keyValuePair.Key).ToList();
    }


    //?+ How To use
    //public List<ProductDetail> GetProductDetailByCategory(string category)
    //{
    //    //Build a cacheKey
    //    string cacheKey = "GetProductDetailByCategory-" + category;

    //    List<ProductDetail> productDetails = DataCaching.Get<List<ProductDetail>>(cacheKey);
    //    if (productDetails == null)
    //    {
    //        // Retrieve from the database
    //        ProductData productData = new ProductData();
    //        productDetails = productData.GetProductDetailByCategory(category);

    //        // Add into cache
    //        DataCaching.Add(productDetails, cacheKey);
    //    }
    //    return productDetails;
    //}

}