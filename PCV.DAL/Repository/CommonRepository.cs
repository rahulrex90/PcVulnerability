using PCV.DAL.General;
using PCV.Entities;
using PCV.DAL.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DateTimeExtension;
using System.Data.Entity;
using System.Web;
using System.IO;
using System.Data.SqlClient;
using System.Data.Entity.Core.EntityClient;

namespace PCV.DAL.Repository
{
    public class CommonRepository : ICommonRepository
    {
        #region Constructors

        public CommonRepository()
        {

        }

        #endregion

        #region===========Methods==========


        public string GetConString(string serverName,string databaseName,string databaseId,string databasePasw)
        {
            SqlConnectionStringBuilder sqlBuilder = new SqlConnectionStringBuilder
            {
                DataSource = serverName,
                InitialCatalog = databaseName,
                PersistSecurityInfo = true,
                IntegratedSecurity = true,
                MultipleActiveResultSets = true,
                ConnectTimeout=0,

                UserID = databaseId,
                Password = databasePasw,
            };

            // assumes a connectionString name in .config of MyDbEntities
            var entityConnectionStringBuilder = new EntityConnectionStringBuilder
            {
                Provider = "System.Data.SqlClient",
                ProviderConnectionString = sqlBuilder.ConnectionString,
                Metadata = "res://*/PCVEntities.csdl|res://*/PCVEntities.ssdl|res://*/PCVEntities.msl",
            };

            return entityConnectionStringBuilder.ConnectionString;
        }

        public void SendEmail_ResetPassword(string name, string email, string callbackUrl)
        {
            clsWriteLog.WriteLog("reset".ToString());
            string returnValue = string.Empty;

            string resetUrlRaw = callbackUrl;
            string confirmUrl = AppCode.TamperProofString.GenerateSecureLink(resetUrlRaw);

            string mailHeading, mailBody, mailTemplate;
            mailHeading = "Reset your password";
            mailBody = File.ReadAllText(HttpContext.Current.Server.MapPath("/App_Data/Email-ResetPassword.html"));
            mailBody = mailBody.Replace("##MName##", name);
            mailBody = mailBody.Replace("##Username##", email);
            mailBody = mailBody.Replace("##ConfirmURL##", confirmUrl);
            mailBody = mailBody.Replace("##EmailFooter##", File.ReadAllText(HttpContext.Current.Server.MapPath("/App_Data/Email-Template-Footer.html")));
            mailBody = mailBody.Replace("[WebsiteName]", AppConfiguration.Website_Name);

            mailTemplate = File.ReadAllText(HttpContext.Current.Server.MapPath("/App_Data/Email-Template.html"));
            mailTemplate = mailTemplate.Replace("##mailerContent##", mailBody);
            mailTemplate = mailTemplate.Replace("##mailerHeading##", mailHeading);
            mailTemplate = mailTemplate.Replace("##Website_Url##", AppConfiguration.Website_Url);
            mailTemplate = mailTemplate.Replace("##Website_Name##", AppConfiguration.Website_Name);

            AppCode.Mail mail = new AppCode.Mail();
            mail.From = AppConfiguration.Admin_Email_From;
            mail.ToName = name;
            mail.To = email;
            mail.ToCC= null;
            mail.ToBcc = null;
            mail.Attachment = null;
            mail.Subject = string.Format("{0} - {1}", mailHeading, AppConfiguration.Website_Name);
            mail.Heading = mailHeading;
            mail.Body = mailTemplate;
            mail.SendEmail();

            returnValue = email;


        }
        #endregion




    }
}
