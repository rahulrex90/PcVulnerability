using PCV.DAL.ViewModels;
using PCV.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PCV.DAL.Repository
{
    class ReportRepository : IReportRepository
    {
        private PCVEntities _momContext;
        private string _constring;
        #region Constructors

        public ReportRepository(PCVEntities momContext)
        {
            _momContext = momContext;

        }

        #endregion

        #region Methods



        public IList<PCToolModels> GetAllPCTOOLListInRange(DateTime sdt, DateTime edt)
        {

            using (var db = new PCVEntities(MySession.Current.ConnString))
            {
                //return query.ToList();

                var q = db.PC_tool.AsNoTracking().Where(m => m.sys_date >= sdt && m.sys_date <= edt).Select(x => new PCToolModels
                {
                    Id = x.ID,
                    Computer_Name = x.Computer_Name,
                    Operating_System = x.Operating_System,
                    Description = x.Description,
                    InstallDate = x.InstallDate,
                    SerialNumber = x.SerialNumber,
                    ServicePackMajorVersion = x.ServicePackMajorVersion,
                    WindowsDirectory = x.WindowsDirectory,
                    Serial_Number = x.Serial_Number,
                    System_IP = x.System_IP,
                    User_Name = x.User_Name,
                    DepartName = x.DepartName,
                    Symantec_Installed = x.Symantec_Installed,
                    Windows_update = x.Windows_update,
                    Waterwall_Installed = x.Waterwall_Installed,
                    Privacy_i_Installed = x.Privacy_i_Installed,
                    Print_Agent = x.Print_Agent,
                    E_Doc = x.E_Doc,
                    PI_Count = x.PI_Count,
                    Shared_Folder_List = x.Shared_Folder_List,
                    Shared_Folder_count = x.Shared_Folder_count,
                    Port_80_disabled = x.Port_80_disabled,
                    Port_22_disabled = x.Port_22_disabled,
                    Port_20_disabled = x.Port_20_disabled,
                    Port_23_disabled = x.Port_23_disabled,
                    Port_25_disabled = x.Port_25_disabled,
                    Port_443_disabled = x.Port_443_disabled,
                    Guest_Account_disabled = x.Guest_Account_disabled,
                    Local_admin_list = x.Local_admin_list,
                    IE_Verson_above_8 = x.IE_Verson_above_8,
                    sys_date = x.sys_date,
                    sys_time = x.sys_time,
                    Screen_saver_Secure = x.Screen_saver_Secure,
                    Screen_Saver_time = x.Screen_Saver_time,
                    Screen_Saver_Avtive = x.Screen_Saver_Avtive,
                    SNMP_Services_disabled = x.SNMP_Services_disabled,
                    PC_type = x.PC_type,
                    AD_check = x.AD_check,
                    Version = x.Version,
                    Result = x.Result,
                    Manufacturer = x.Manufacturer,
                    Model = x.Model,
                    System_Type = x.System_Type,
                    Mac_Dec = x.Mac_Dec,
                    MAC_Add = x.MAC_Add,
                    Processor = x.Processor,
                    Physical_Memory = x.Physical_Memory,
                    HDD_Model = x.HDD_Model,
                    HDD_Size = x.HDD_Size,
                    HDD_SrNo = x.HDD_SrNo,
                    GetIEVersion = x.GetIEVersion,
                    FailResult = x.FailResult,
                    Nethelper = x.Nethelper
                }).AsQueryable().Distinct();

                return q.ToList();

            }
        }

        public IList<PCToolModels> GetAllPCTOOLsByRangeAndFilterType(DateTime sdt, DateTime edt, string result, string filtertype, string department, string user)
        {

            using (var db = new PCVEntities(MySession.Current.ConnString))
            {


                var rawData = db.PC_tool.AsNoTracking().Where(m => m.sys_date >= sdt && m.sys_date <= edt).Select(x => new PCToolModels
                {
                    Id = x.ID,
                    Computer_Name = x.Computer_Name,
                    Operating_System = x.Operating_System,
                    Description = x.Description,
                    InstallDate = x.InstallDate,
                    SerialNumber = x.SerialNumber,
                    ServicePackMajorVersion = x.ServicePackMajorVersion,
                    WindowsDirectory = x.WindowsDirectory,
                    Serial_Number = x.Serial_Number,
                    System_IP = x.System_IP,
                    User_Name = x.User_Name,
                    DepartName = x.DepartName,
                    Symantec_Installed = x.Symantec_Installed,
                    Windows_update = x.Windows_update,
                    Waterwall_Installed = x.Waterwall_Installed,
                    Privacy_i_Installed = x.Privacy_i_Installed,
                    Print_Agent = x.Print_Agent,
                    E_Doc = x.E_Doc,
                    PI_Count = x.PI_Count,
                    Shared_Folder_List = x.Shared_Folder_List,
                    Shared_Folder_count = x.Shared_Folder_count,
                    Port_80_disabled = x.Port_80_disabled,
                    Port_22_disabled = x.Port_22_disabled,
                    Port_20_disabled = x.Port_20_disabled,
                    Port_23_disabled = x.Port_23_disabled,
                    Port_25_disabled = x.Port_25_disabled,
                    Port_443_disabled = x.Port_443_disabled,
                    Guest_Account_disabled = x.Guest_Account_disabled,
                    Local_admin_list = x.Local_admin_list,
                    IE_Verson_above_8 = x.IE_Verson_above_8,
                    sys_date = x.sys_date,
                    sys_time = x.sys_time,
                    Screen_saver_Secure = x.Screen_saver_Secure,
                    Screen_Saver_time = x.Screen_Saver_time,
                    Screen_Saver_Avtive = x.Screen_Saver_Avtive,
                    SNMP_Services_disabled = x.SNMP_Services_disabled,
                    PC_type = x.PC_type,
                    AD_check = x.AD_check,
                    Version = x.Version,
                    Result = x.Result,
                    Manufacturer = x.Manufacturer,
                    Model = x.Model,
                    System_Type = x.System_Type,
                    Mac_Dec = x.Mac_Dec,
                    MAC_Add = x.MAC_Add,
                    Processor = x.Processor,
                    Physical_Memory = x.Physical_Memory,
                    HDD_Model = x.HDD_Model,
                    HDD_Size = x.HDD_Size,
                    HDD_SrNo = x.HDD_SrNo,
                    GetIEVersion = x.GetIEVersion,
                    FailResult = x.FailResult,
                    Nethelper = x.Nethelper
                }).Distinct().AsQueryable();


                //return query.ToList();


                if (result.IsNotBlank())
                {
                    rawData = rawData.Where(m => m.Result.ToLower().Trim() == result.ToLower());
                }

                if (department.IsNotBlank())
                {
                    rawData = rawData.Where(m => m.DepartName == department);

                }
                if (user.IsNotBlank())
                {
                    rawData = rawData.Where(m => m.User_Name == user);

                }
                if (filtertype.IsNotBlank())
                {

                    if (filtertype == "pcplus")
                    {
                        rawData = rawData.Where(m => m.Waterwall_Installed.ToLower().Trim() == "N");
                    }
                    else if (filtertype == "sharedfolder")
                    {
                        rawData = rawData.Where(m => m.Shared_Folder_count.ToLower().Trim() == "N");

                    }
                    else if (filtertype == "antivirus")
                    {
                        rawData = rawData.Where(m => m.Symantec_Installed.ToLower().Trim() == "N");
                    }
                    else if (filtertype == "privacy")
                    {
                        rawData = rawData.Where(m => m.Privacy_i_Installed.ToLower().Trim() == "N");
                    }
                    else if (filtertype == "screensaver")
                    {
                        rawData = rawData.Where(m => m.Screen_Saver_Avtive.ToLower().Trim() == "N");
                    }
                    else if (filtertype == "printagent")
                    {
                        rawData = rawData.Where(m => m.Print_Agent.ToLower().Trim() == "N");
                    }
                    else if (filtertype == "edoc")
                    {
                        rawData = rawData.Where(m => m.E_Doc.ToLower().Trim() == "N");
                    }


                }
                return rawData.ToList();

            }
        }




        //public IList<PCToolModels> GetAllPCTOOLs()
        //{

        //    using (var db = new PCVEntities(MySession.Current.ConnString))
        //    {

        //        var q = db.PC_tool.AsNoTracking().Select(x => new PCToolModels
        //        {
        //            Id = x.ID,
        //            Computer_Name = x.Computer_Name,
        //            Operating_System = x.Operating_System,
        //            Description = x.Description,
        //            InstallDate = x.InstallDate,
        //            SerialNumber = x.SerialNumber,
        //            ServicePackMajorVersion = x.ServicePackMajorVersion,
        //            WindowsDirectory = x.WindowsDirectory,
        //            Serial_Number = x.Serial_Number,
        //            System_IP = x.System_IP,
        //            User_Name = x.User_Name,
        //            DepartName = x.DepartName,
        //            Symantec_Installed = x.Symantec_Installed,
        //            Windows_update = x.Windows_update,
        //            Waterwall_Installed = x.Waterwall_Installed,
        //            Privacy_i_Installed = x.Privacy_i_Installed,
        //            Print_Agent = x.Print_Agent,
        //            E_Doc = x.E_Doc,
        //            PI_Count = x.PI_Count,
        //            Shared_Folder_List = x.Shared_Folder_List,
        //            Shared_Folder_count = x.Shared_Folder_count,
        //            Port_80_disabled = x.Port_80_disabled,
        //            Port_22_disabled = x.Port_22_disabled,
        //            Port_20_disabled = x.Port_20_disabled,
        //            Port_23_disabled = x.Port_23_disabled,
        //            Port_25_disabled = x.Port_25_disabled,
        //            Port_443_disabled = x.Port_443_disabled,
        //            Guest_Account_disabled = x.Guest_Account_disabled,
        //            Local_admin_list = x.Local_admin_list,
        //            IE_Verson_above_8 = x.IE_Verson_above_8,
        //            sys_date = x.sys_date,
        //            sys_time = x.sys_time,
        //            Screen_saver_Secure = x.Screen_saver_Secure,
        //            Screen_Saver_time = x.Screen_Saver_time,
        //            Screen_Saver_Avtive = x.Screen_Saver_Avtive,
        //            SNMP_Services_disabled = x.SNMP_Services_disabled,
        //            PC_type = x.PC_type,
        //            AD_check = x.AD_check,
        //            Version = x.Version,
        //            Result = x.Result,
        //            Manufacturer = x.Manufacturer,
        //            Model = x.Model,
        //            System_Type = x.System_Type,
        //            Mac_Dec = x.Mac_Dec,
        //            MAC_Add = x.MAC_Add,
        //            Processor = x.Processor,
        //            Physical_Memory = x.Physical_Memory,
        //            HDD_Model = x.HDD_Model,
        //            HDD_Size = x.HDD_Size,
        //            HDD_SrNo = x.HDD_SrNo,
        //            GetIEVersion = x.GetIEVersion,
        //            FailResult = x.FailResult,
        //            Nethelper = x.Nethelper
        //        }).Distinct();
        //        return q.ToList();
        //        //return query.ToList();
        //        //var Ids = db.PC_tool.AsNoTracking().Select(m => m.ID).ToList();
        //        //return GetPCToolDetails(Ids).ToList();

        //    }
        //}


        public IList<PcToolUserSiteModel> GetAllPC_TOOLUserSiteList(DateTime sdt, DateTime edt, string regionCode)
        {

            using (var db = new PCVEntities(MySession.Current.ConnString))
            {
                //return query.ToList();
                var rawdata = db.PC_tool_Site_Result.AsNoTracking().Where(m => m.Sys_Date >= sdt && m.Sys_Date <= edt).ToList();

                if (regionCode.IsNotBlank())
                {
                    rawdata = rawdata.Where(m => m.Region == regionCode).ToList();
                }
                var data = rawdata.Select(m => new PcToolUserSiteModel()
                {

                    ID = m.ID,
                    Fail_Result = m.Fail_Result,
                    Pass_Result = m.Pass_Result,
                    Total_Result = m.Total_Result,
                    Region = m.Region,
                    Site = m.Site,
                    Sys_Date = m.Sys_Date
                }).ToList();
                return data;

            }
        }

        public IList<PC_tool_SoftModel> GetPcToolSoft()
        {
            using (var db = new PCVEntities(MySession.Current.ConnString))
            {
                //return query.ToList();
                var rawdata = db.PC_tool_Soft.AsNoTracking().ToList();

                var data = rawdata.Select(m => new PC_tool_SoftModel()
                {

                    ID = m.ID,
                    Computer_Name = m.Computer_Name,
                    Identiying_Number = m.Identiying_Number,
                    Operating_System = m.Operating_System,
                    Software_Name = m.Software_Name,
                    System_IP = m.System_IP,
                    User_Name = m.User_Name,
                    Vendor = m.Vendor,
                    Version = m.Version,
                    Sys_Date = m.Sys_Date
                }).ToList();
                return data;

            }

        }

        public IList<PC_tool_SoftModel> GetIllegalSoftware()
        {
            using (var db = new PCVEntities(MySession.Current.ConnString))
            {
                //return query.ToList();
                var rawdata = db.PC_tool_Soft.AsNoTracking().Where(m=>m.Unauthorized.TrimEnd()=="Y" && m.Uninstalled.TrimEnd() == "N").ToList();

                var data = rawdata.Select(m => new PC_tool_SoftModel()
                {

                    ID = m.ID,
                    Computer_Name = m.Computer_Name,
                    Identiying_Number = m.Identiying_Number,
                    Operating_System = m.Operating_System,
                    Software_Name = m.Software_Name,
                    System_IP = m.System_IP,
                    User_Name = m.User_Name,
                    Vendor = m.Vendor,
                    Version = m.Version,
                    Sys_Date = m.Sys_Date
                }).ToList();
                return data;

            }

        }
        #endregion
    }
}
