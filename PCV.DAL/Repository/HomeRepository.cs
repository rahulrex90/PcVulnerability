using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using PCV.DAL.ViewModels;
using PCV.Entities;

namespace PCV.DAL.Repository
{
    class HomeRepository : IHomeRepository
    {
        private PCVEntities _momContext;
        private string _constring;
        #region Constructors

        public HomeRepository(PCVEntities momContext)
        {
            _momContext = momContext;

        }

        #endregion

        #region Methods

        private IEnumerable<MenuModel> GetMenuDetails(List<long> ids)
        {
            using (var db = new PCVEntities())
            {
                var rawData = db.Menu.AsNoTracking().Where(t => ids.Contains(t.Id)).ToList();
                if (rawData == null)
                    return null;

                var q = rawData.Select(x => new MenuModel
                {
                    Id = x.Id,
                    MenuName = x.MenuName,
                    MenuType = x.MenuType,
                    Description = x.Description,
                    Url = x.Url,
                    Tooltip = x.Tooltip,
                    ParentId = x.ParentId,
                    ParentName = db.Menu.Where(m => m.Id == x.ParentId).Select(m => m.MenuName).FirstOrDefault(),
                    InActive = x.InActive,
                    Priority = x.Priority.To<int>()
                }).Distinct().OrderBy(o => o.MenuName);

                return q.ToList();

            }
        }

        public IList<MenuModel> GetAllMenuList()
        {

            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var menuIds = db.Menu.AsNoTracking().Select(m => m.Id).ToList();
                return GetMenuDetails(menuIds).ToList();

            }
        }


        public MenuModel GetMenuDetailById(long menuId)
        {

            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var menuIds = db.Menu.AsNoTracking().Where(m => m.Id == menuId).Select(m => m.Id).ToList();
                return GetMenuDetails(menuIds).FirstOrDefault();
            }

        }

        public long CreateUpdateMenu(MenuModel model)
        {
            using (var db = new PCVEntities())
            {
                if (model != null)
                {
                    var myModel = new Menu();
                    myModel.MenuName = model.MenuName;
                    myModel.MenuType = model.MenuType;
                    myModel.Description = model.Description;
                    if (model.ParentId.IsNotBlank())
                        myModel.ParentId = model.ParentId;
                    else
                        myModel.ParentId = 0;

                    myModel.Url = model.Url;
                    myModel.Tooltip = model.Tooltip;
                    myModel.InActive = model.InActive;
                    myModel.Priority = model.Priority;
                    if (model.Id > 0)
                    {
                        myModel.Id = model.Id.To<long>();
                        myModel.UpdatedDate = DateTime.Now;
                        myModel.UpdatedBy = MySession.Current.UserName;
                        db.Entry(myModel).State = EntityState.Modified;
                    }
                    else
                    {
                        myModel.CreatedDate = DateTime.Now;
                        myModel.CreatedBy = MySession.Current.UserName;
                        db.Menu.Add(myModel);
                    }
                    db.SaveChanges();
                    if (myModel.Id > 0)
                        return myModel.Id;
                    else
                        return 0;
                }
                return 0;
            }
        }


        public void UpdateMenuStatusById(long menuID)
        {

            using (var db = new PCVEntities())
            {

                var data = db.Menu.Where(m => m.Id == menuID).FirstOrDefault();
                data.InActive = data.InActive == true ? false : true;
                data.UpdatedDate = DateTime.Now;
                data.UpdatedBy = MySession.Current.UserName;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }

        }

        #region ===============region-============

        private IEnumerable<RegionModel> GetRegionDetails(List<long> ids)
        {
            using (var db = new PCVEntities())
            {
                var rawData = db.Region.AsNoTracking().Where(t => ids.Contains(t.Id)).ToList();
                if (rawData == null)
                    return null;

                var q = rawData.Select(x => new RegionModel
                {
                    Id = x.Id,
                    RegionCode = x.RegionCode,
                    RegionName = x.RegionName,
                    Description = x.Description,
                    InActive = x.InActive

                }).Distinct().OrderBy(o => o.RegionName);

                return q.ToList();

            }
        }

        public IList<RegionModel> GetAllRegionList()
        {

            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var menuIds = db.Region.AsNoTracking().Select(m => m.Id).ToList();
                return GetRegionDetails(menuIds).ToList();

            }
        }


        public RegionModel GetRegionDetailById(long menuId)
        {

            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var menuIds = db.Region.AsNoTracking().Where(m => m.Id == menuId).Select(m => m.Id).ToList();
                return GetRegionDetails(menuIds).FirstOrDefault();
            }

        }

        public long CreateUpdateRegion(RegionModel model)
        {
            using (var db = new PCVEntities())
            {
                if (model != null)
                {
                    var myModel = new Region();
                    myModel.RegionName = model.RegionName;
                    myModel.RegionCode = model.RegionCode;
                    myModel.Description = model.Description;
                    myModel.InActive = model.InActive;
                    if (model.Id > 0)
                    {
                        myModel.Id = model.Id.To<long>();
                        myModel.UpdatedDate = DateTime.Now;
                        myModel.UpdatedBy = MySession.Current.UserName;
                        db.Entry(myModel).State = EntityState.Modified;
                    }
                    else
                    {
                        myModel.CreatedDate = DateTime.Now;
                        myModel.CreatedBy = MySession.Current.UserName;
                        db.Region.Add(myModel);
                    }
                    db.SaveChanges();
                    if (myModel.Id > 0)
                        return myModel.Id;
                    else
                        return 0;
                }
                return 0;
            }
        }
        #endregion

        public void UpdateRegionStatusById(long regionId)
        {

            using (var db = new PCVEntities())
            {
                var data = db.Region.Where(m => m.Id == regionId).FirstOrDefault();
                data.InActive = data.InActive == true ? false : true;
                data.UpdatedDate = DateTime.Now;
                data.UpdatedBy = MySession.Current.UserName;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }

        }

        #region ===============Site Locations-============

        private IEnumerable<SiteLocationModel> GetSiteLocDetails(List<long> ids)
        {
            using (var db = new PCVEntities())
            {
                var rawData = db.SiteLocation.AsNoTracking().Where(t => ids.Contains(t.Id)).ToList();
                if (rawData == null)
                    return null;

                var q = rawData.Select(x => new SiteLocationModel
                {
                    Id = x.Id,
                    SiteId = x.SiteId,
                    LocationName = x.LocationName,
                    SiteName = x.PC_Tool_Site.Site_name,
                    Description = x.Description,
                    InActive = x.InActive

                }).Distinct().OrderBy(o => o.LocationName);

                return q.ToList();

            }
        }

        public IList<SiteLocationModel> GetAllSiteLocList()
        {

            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var menuIds = db.SiteLocation.AsNoTracking().Select(m => m.Id).ToList();
                return GetSiteLocDetails(menuIds).ToList();

            }
        }


        public SiteLocationModel GetSiteLocDetailById(long menuId)
        {

            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var menuIds = db.SiteLocation.AsNoTracking().Where(m => m.Id == menuId).Select(m => m.Id).ToList();
                return GetSiteLocDetails(menuIds).FirstOrDefault();
            }

        }

        public long CreateUpdateSiteLoc(SiteLocationModel model)
        {
            using (var db = new PCVEntities())
            {
                if (model != null)
                {
                    var myModel = new SiteLocation();
                    myModel.LocationName = model.LocationName;
                    myModel.SiteId = model.SiteId;
                    myModel.Description = model.Description;
                    myModel.InActive = model.InActive;
                    if (model.Id > 0)
                    {
                        myModel.Id = model.Id.To<long>();
                        myModel.UpdatedDate = DateTime.Now;
                        myModel.UpdateBy = MySession.Current.UserName;
                        db.Entry(myModel).State = EntityState.Modified;
                    }
                    else
                    {
                        myModel.CreatedDate = DateTime.Now;
                        myModel.CreatedBy = MySession.Current.UserName;
                        db.SiteLocation.Add(myModel);
                    }
                    db.SaveChanges();
                    if (myModel.Id > 0)
                        return myModel.Id;
                    else
                        return 0;
                }
                return 0;
            }
        }

        public void UpdateSiteLocationStatusById(long siteLocId)
        {

            using (var db = new PCVEntities())
            {
                var data = db.SiteLocation.Where(m => m.Id == siteLocId).FirstOrDefault();
                data.InActive = data.InActive == true ? false : true;
                data.UpdatedDate = DateTime.Now;
                data.UpdateBy = MySession.Current.UserName;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }

        }
        #endregion





        #region ===============Site Master-============

        private IEnumerable<SiteModel> GetSiteDetails(List<int> ids)
        {
            using (var db = new PCVEntities())
            {
                var rawData = db.PC_Tool_Site.AsNoTracking().Where(t => ids.Contains(t.ID)).ToList();
                if (rawData == null)
                    return null;

                var q = rawData.Select(x => new SiteModel
                {
                    ID = x.ID,
                    Site_name = x.Site_name,
                    Area_name = x.Area_name,
                    RegionID = x.RegionID,
                    SiteUrl = x.SiteUrl,
                    RegionName = x.Region.RegionName,
                    Database_ID = x.Database_ID,
                    Database_Name = x.Database_Name,
                    Database_PW = x.Database_PW,
                    Default_Site = x.Default_Site,
                    IsDefaultSite = x.Default_Site == "Y" ? true : false,
                    Server_IP = x.Server_IP,
                    InActive = x.InActive,
                    ConnString = x.ConnString

                }).Distinct().OrderBy(o => o.Site_name);

                return q.ToList();

            }
        }

        public IList<SiteModel> GetAllSiteList()
        {

            // using (var db = new PCVEntities(MySession.Current.ConnString))
            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var menuIds = db.PC_Tool_Site.AsNoTracking().Select(m => m.ID).ToList();
                return GetSiteDetails(menuIds).ToList();

            }
        }


        public SiteModel GetSiteDetailById(long menuId)
        {

            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var menuIds = db.PC_Tool_Site.AsNoTracking().Where(m => m.ID == menuId).Select(m => m.ID).ToList();
                return GetSiteDetails(menuIds).FirstOrDefault();
            }

        }

        public long CreateUpdateSite(SiteModel model)
        {
            using (var db = new PCVEntities())
            {
                if (model != null)
                {
                    var myModel = new PC_Tool_Site();
                    myModel.ConnString = model.ConnString;
                    myModel.Site_name = model.Site_name;
                    myModel.Area_name = model.Area_name;
                    myModel.RegionID = model.RegionID;
                    myModel.Database_ID = model.Database_ID;
                    myModel.Database_Name = model.Database_Name;
                    myModel.Database_PW = model.Database_PW;
                    if (model.IsDefaultSite)
                    {
                        myModel.Default_Site = "Y";
                    }
                    else
                    {
                        myModel.Default_Site = "N";
                    }

                    myModel.Server_IP = model.Server_IP;
                    myModel.SiteUrl = model.SiteUrl;
                    myModel.InActive = model.InActive;
                    if (model.ID > 0)
                    {
                        myModel.ID = model.ID;
                        myModel.updated_date = DateTime.Now;
                        myModel.updated_by = MySession.Current.UserName;
                        db.Entry(myModel).State = EntityState.Modified;
                    }
                    else
                    {
                        myModel.CreatedDate = DateTime.Now;
                        myModel.CreatedBy = MySession.Current.UserName;
                        db.PC_Tool_Site.Add(myModel);
                    }
                    db.SaveChanges();
                    if (myModel.ID > 0)
                        return myModel.ID;
                    else
                        return 0;
                }
                return 0;
            }
        }
        #endregion

        public void UpdateSiteStatusById(long site)
        {

            using (var db = new PCVEntities())
            {
                var data = db.PC_Tool_Site.Where(m => m.ID == site).FirstOrDefault();
                data.InActive = data.InActive == true ? false : true;
                data.updated_date = DateTime.Now;
                data.updated_by = MySession.Current.UserName;
                db.Entry(data).State = EntityState.Modified;
                db.SaveChanges();
            }

        }

        #region ===============User Site Master-============

        private IEnumerable<UserSiteModel> GetUserSiteDetails(List<long> ids)
        {
            using (var db = new PCVEntities())
            {
                var rawData = db.UserSite.AsNoTracking().Where(t => ids.Contains(t.Id)).ToList();
                if (rawData == null)
                    return null;

                var q = rawData.Select(x => new UserSiteModel
                {
                    Id = x.Id,
                    SiteName = x.PC_Tool_Site.Site_name,
                    UserId = x.UserId,
                    SiteId = x.SiteId,
                    RoleId = x.RoleId,
                    InActive = x.InActive,
                    IsDefaultSite = x.IsDefaultSite

                }).Distinct().OrderBy(o => o.SiteName);

                return q.ToList();

            }
        }

        public IList<UserSiteModel> GetAllUserSiteList()
        {

            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var menuIds = db.UserSite.AsNoTracking().Select(m => m.Id).ToList();
                return GetUserSiteDetails(menuIds).ToList();

            }
        }


        public UserSiteModel GetUserSiteDetailById(long usiteId)
        {

            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var usIds = db.UserSite.AsNoTracking().Where(m => m.Id == usiteId).Select(m => m.Id).ToList();
                return GetUserSiteDetails(usIds).FirstOrDefault();
            }

        }

        public IList<UserSiteModel> GetUserSiteListByUserId(string userId)
        {
            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var usIds = db.UserSite.AsNoTracking().Where(m => m.UserId == userId).Select(m => m.Id).ToList();
                return GetUserSiteDetails(usIds).ToList();
            }

        }
        public SiteModel GetDefaultSiteByUserId(string userId)
        {
            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var siteId = db.UserSite.AsNoTracking().Where(m => m.UserId == userId && m.IsDefaultSite == true).Select(m => m.SiteId).ToList();
                return GetSiteDetails(siteId).FirstOrDefault();
            }

        }

        public void SetDefaultSiteByForUser(string userId, int siteId)
        {
            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var userSite = db.UserSite.AsNoTracking().Where(m => m.UserId == userId ).ToList();
             
                if (userSite.IsNotBlank())
                {

                    foreach (var item in userSite)
                    {
                        if(item.SiteId==siteId)
                        {
                            item.IsDefaultSite = true;
                        }
                        else
                        {
                            item.IsDefaultSite = false;
                        }
                      
                        item.UpdatedDate = DateTime.Now;
                        item.UpdatedBy = MySession.Current.UserName;
                        db.Entry(item).State = EntityState.Modified;
                    }
                       
                    db.SaveChanges();
                }

            }

        }

        public UserSiteModel GetUserSiteDetailByUserId(string userId)
        {

            using (var db = new PCVEntities())
            {
                //return query.ToList();
                var usIds = db.UserSite.AsNoTracking().Where(m => m.UserId == userId).Select(m => m.Id).ToList();
                return GetUserSiteDetails(usIds).FirstOrDefault();
            }

        }

        public long CreateUpdateUserSite(UserSiteModel model)
        {
            using (var db = new PCVEntities())
            {
                if (model != null)
                {
                    var myModel = new UserSite();

                    myModel.SiteId = model.SiteId;
                    myModel.UserId = model.UserId;
                    myModel.RoleId = model.RoleId;
                    myModel.InActive = model.InActive;

                    if (model.Id > 0)
                    {
                        myModel.Id = model.Id.To<long>();
                        myModel.UpdatedDate = DateTime.Now;
                        myModel.UpdatedBy = MySession.Current.UserName;
                        db.Entry(myModel).State = EntityState.Modified;
                    }
                    else
                    {
                        myModel.CreatedDate = DateTime.Now;
                        myModel.CreatedBy = MySession.Current.UserName;
                        db.UserSite.Add(myModel);
                    }
                    db.SaveChanges();
                    if (myModel.Id > 0)
                        return myModel.Id;
                    else
                        return 0;
                }
                return 0;
            }
        }

        public void AddUpdateUserSite(UserSiteCreateModel model)
        {
            DeleteSiteForUser(model.UserId);
            List<UserSite> urList = new List<UserSite>();
            using (var db = new PCVEntities())
            {
                if (model.SiteId.IsNotBlank())
                {
                    foreach (var item in model.SiteId)
                    {
                        UserSite oneRoleMenu = new UserSite();
                        oneRoleMenu.UserId = model.UserId;
                        oneRoleMenu.SiteId = item;
                        oneRoleMenu.CreatedDate = DateTime.Now;
                        oneRoleMenu.CreatedBy = MySession.Current.UserName;
                        if (model.IsDefault == item.To<string>())
                        {
                            oneRoleMenu.IsDefaultSite = true;
                        }
                        else
                        {
                            oneRoleMenu.IsDefaultSite = false;
                        }
                        urList.Add(oneRoleMenu);
                    }
                    db.UserSite.AddRange(urList);
                    db.SaveChanges();
                }
            }

        }

        private void DeleteSiteForUser(string userId)
        {
            using (var db = new PCVEntities())
            {
                db.UserSite.RemoveRange(db.UserSite.Where(x => x.UserId == userId));
                db.SaveChanges();
            }
        }

        #endregion



        #region Assingn menu to roles ===============

        private void DeleteMenuForRole(string roleId)
        {
            using (var db = new PCVEntities())
            {
                db.MenuInRole.RemoveRange(db.MenuInRole.Where(x => x.RoleId == roleId));
                db.SaveChanges();
            }
        }

        public void AddUpdateMenuInRole(MenuInRoleModel model)
        {
            DeleteMenuForRole(model.RoleId);
            List<MenuInRole> urList = new List<MenuInRole>();
            using (var db = new PCVEntities())
            {
                if (model.MenuId.IsNotBlank())
                {
                    foreach (var item in model.MenuId)
                    {
                        MenuInRole oneRoleMenu = new MenuInRole();
                        oneRoleMenu.RoleId = model.RoleId;
                        oneRoleMenu.MenuId = item.To<long>();
                        oneRoleMenu.CreatedDate = DateTime.Now;
                        oneRoleMenu.CreatedBy = MySession.Current.UserName;
                        urList.Add(oneRoleMenu);
                    }
                    db.MenuInRole.AddRange(urList);
                    db.SaveChanges();
                }
            }

        }


        public IList<MenuInRole> GetMenusByRoleId(string roleId)
        {
            using (var db = new PCVEntities())
            {
                return db.MenuInRole.Where(m => m.RoleId == roleId).AsNoTracking().ToList();
            }
        }

        #endregion


        #region Assingn menu to Users ===============

        private void DeleteMenuForUser(string userId)
        {
            using (var db = new PCVEntities())
            {
                db.UserMenus.RemoveRange(db.UserMenus.Where(x => x.UserId == userId));
                db.SaveChanges();
            }
        }

        public void AddUpdateUserMenus(UserMenuModel model)
        {
            DeleteMenuForUser(model.UserId);
            List<UserMenus> urList = new List<UserMenus>();
            using (var db = new PCVEntities())
            {
                if (model.MenuId.IsNotBlank())
                {
                    foreach (var item in model.MenuId)
                    {
                        UserMenus oneRoleMenu = new UserMenus();
                        oneRoleMenu.UserId = model.UserId;
                        oneRoleMenu.MenuId = item.To<long>();
                        oneRoleMenu.CreatedDate = DateTime.Now;
                        oneRoleMenu.CreatedBy = MySession.Current.UserName;
                        urList.Add(oneRoleMenu);
                    }
                    db.UserMenus.AddRange(urList);
                    db.SaveChanges();
                }
            }

        }


        public IList<UserMenus> GetMenusByUserId(string userId)
        {
            using (var db = new PCVEntities())
            {
                return db.UserMenus.Where(m => m.UserId == userId).AsNoTracking().ToList();
            }
        }

        #endregion





        #endregion

    }
}
